>(***********************************************************************)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*                                                                     *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*                                OCaml                                *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*                                                                     *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*                                                                     *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*  en Automatique.  All rights reserved.  This file is distributed    *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*  under the terms of the GNU Library General Public License, with    *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*  the special exception on linking described in file ../LICENSE.     *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(*                                                                     *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>(***********************************************************************)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>module type OrderedType =
#^^^^^^^^^^^^ source.ocaml meta.module.type.ocaml keyword.other.module-type-definition.ocaml
#            ^^^^^^^^^^^ source.ocaml meta.module.type.ocaml entity.name.type.module-type.ocaml
#                       ^ source.ocaml
#                        ^ source.ocaml keyword.operator.infix.ocaml
>  sig
#^^ source.ocaml
#  ^^^ source.ocaml meta.module.signature.ocaml keyword.other.module.signature.ocaml
>    type t
#^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>    val compare: t -> t -> int
#^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                           ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>  end
#^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#  ^^^ source.ocaml meta.module.signature.ocaml keyword.other.module.signature.ocaml
>
>module type S =
#^^^^^^^^^^^^ source.ocaml meta.module.type.ocaml keyword.other.module-type-definition.ocaml
#            ^ source.ocaml meta.module.type.ocaml entity.name.type.module-type.ocaml
#             ^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
>  sig
#^^ source.ocaml
#  ^^^ source.ocaml meta.module.signature.ocaml keyword.other.module.signature.ocaml
>    type key
#^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>    type +'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>    val empty: 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val is_empty: 'a t -> bool
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val mem:  key -> 'a t -> bool
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#              ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val add: key -> 'a -> 'a t -> 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#             ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                 ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val singleton: key -> 'a -> 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                   ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val remove: key -> 'a t -> 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val merge:
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
>          (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
#^^^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#           ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                     ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                  ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                               ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val compare: ('a -> 'a -> int) -> 'a t -> 'a t -> int
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                              ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                      ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val equal: ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                             ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                     ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val iter: (key -> 'a -> unit) -> 'a t -> unit
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#               ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                             ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#               ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                              ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                 ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val for_all: (key -> 'a -> bool) -> 'a t -> bool
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                  ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                             ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val exists: (key -> 'a -> bool) -> 'a t -> bool
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                 ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                               ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val filter: (key -> 'a -> bool) -> 'a t -> 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                 ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val partition: (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                 ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.operator.infix.ocaml
#                                                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val cardinal: 'a t -> int
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val bindings: 'a t -> (key * 'a) list
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                       ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                           ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                 ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val min_binding: 'a t -> (key * 'a)
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
>    val max_binding: 'a t -> (key * 'a)
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
>    val choose: 'a t -> (key * 'a)
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
>    val split: key -> 'a t -> 'a t * 'a option * 'a t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#               ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                              ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.operator.infix.ocaml
#                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                        ^^^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.operator.infix.ocaml
#                                                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                 ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val find: key -> 'a t -> 'a
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#              ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                 ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                  ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                    ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                     ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                         ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                          ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                             ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val map: ('a -> 'b) -> 'a t -> 'b t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#              ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                 ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                   ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>    val mapi: (key -> 'a -> 'b) -> 'a t -> 'b t
#^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#    ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml keyword.other.ocaml
#       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#        ^^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml entity.name.type.value-signature.ocaml
#            ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.type-constraint.ocaml
#             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#               ^^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml punctuation.separator.function-return.ocaml
#                           ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml storage.type.ocaml
#                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                  ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                   ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                     ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                      ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                        ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml punctuation.separator.function-return.ocaml
#                                          ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                           ^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
#                                             ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#                                              ^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml storage.type.ocaml
>  end
#^^ source.ocaml meta.module.signature.ocaml meta.module.signature.val.ocaml
#  ^^^ source.ocaml meta.module.signature.ocaml keyword.other.module.signature.ocaml
>
>module Make(Ord: OrderedType) = struct
#^^^^^^ source.ocaml meta.module.ocaml keyword.other.module-definition.ocaml
#      ^ source.ocaml meta.module.ocaml
#       ^^^^ source.ocaml meta.module.ocaml entity.name.type.module.ocaml
#           ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#            ^^^ source.ocaml meta.type-constraint.ocaml entity.name.type.variant.ocaml
#               ^ source.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                ^^^^^^^^^^^^ source.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                             ^ source.ocaml
#                              ^ source.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml
#                                ^^^^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>
>    type key = Ord.t
#^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.module.type.ocaml support.other.module.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.module.type.ocaml storage.type.module.ocaml
>
>    type 'a t =
#^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
>        Empty
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml entity.name.type.variant.ocaml
>      | Node of 'a t * key * 'a * 'a t * int
#^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.variant-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#             ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                       ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                         ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>
>    let height = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> 0
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
>      | Node(_,_,_,_,h) -> h
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml
>
>    let create l x d r =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      let hl = height l and hr = height r in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                        ^^^ source.ocaml meta.module.structure.ocaml keyword.operator.ocaml
#                           ^^^^ source.ocaml meta.module.structure.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      Node(l, x, d, r, (if hl >= hr then hl + 1 else hr + 1))
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#           ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                          ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let singleton x d = Node(Empty, x, d, Empty, 1)
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                  ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                          ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                               ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let bal l x d r =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      let hl = match l with Empty -> 0 | Node(_,_,_,_,h) -> h in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                    ^^^ source.ocaml meta.module.structure.ocaml
#                       ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.other.function-definition.ocaml
#                                                           ^^^ source.ocaml meta.module.structure.ocaml
#                                                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      let hr = match r with Empty -> 0 | Node(_,_,_,_,h) -> h in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                    ^^^ source.ocaml meta.module.structure.ocaml
#                       ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.other.function-definition.ocaml
#                                                           ^^^ source.ocaml meta.module.structure.ocaml
#                                                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      if hl > hr + 2 then begin
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml
#                          ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        match l with
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>          Empty -> invalid_arg "Map.bal"
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                  ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>        | Node(ll, lv, ld, lr, _) ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>            if height ll >= height lr then
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#              ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                           ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                                      ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>              create ll lv ld (create lr x d r)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>            else begin
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                 ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>              match lr with
#^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#              ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                       ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>                Empty -> invalid_arg "Map.bal"
#^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                        ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                      ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>              | Node(lrl, lrv, lrd, lrr, _)->
#^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                    ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                       ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>                  create (create ll lv ld lrl) lrv lrd (create lrr x d r)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                          ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                        ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>            end
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      end else if hr > hl + 2 then begin
#^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#         ^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                      ^^^^ source.ocaml meta.module.structure.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml
#                              ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml
#                                   ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        match r with
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>          Empty -> invalid_arg "Map.bal"
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                  ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>        | Node(rl, rv, rd, rr, _) ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>            if height rr >= height rl then
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#              ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                           ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                                      ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>              create (create l x d rl) rv rd rr
#^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                      ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
>            else begin
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#                 ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>              match rl with
#^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#              ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                       ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>                Empty -> invalid_arg "Map.bal"
#^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                        ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                      ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>              | Node(rll, rlv, rld, rlr, _) ->
#^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                    ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                       ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                                            ^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>                  create (create l x d rll) rlv rld (create rlr rv rd rr)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                          ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>            end
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      end else
#^^^^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#         ^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>        Node(l, x, d, r, (if hl >= hr then hl + 1 else hr + 1))
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                            ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                  ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                          ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                                      ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let empty = Empty
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>
>    let is_empty = function Empty -> true | _ -> false
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.other.function-definition.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml
#                                                 ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>
>    let rec add x data = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          Node(Empty, x, data, Empty, 1)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                    ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                    ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | Node(l, v, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let c = Ord.compare x v in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if c = 0 then
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            Node(l, x, data, r, h)
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>          else if c < 0 then
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            bal (add x data l) v d r
#^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^^^^^^^ source.ocaml meta.module.structure.ocaml
>          else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            bal l v d (add x data r)
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec find x = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          raise Not_found
#^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                ^^^^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let c = Ord.compare x v in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if c = 0 then d
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                       ^^^ source.ocaml meta.module.structure.ocaml
>          else find x (if c < 0 then l else r)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                         ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                    ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec mem x = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml
#                    ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          false
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let c = Ord.compare x v in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          c = 0 || mem x (if c < 0 then l else r)
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                            ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                          ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                              ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec min_binding = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml
#                          ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> raise Not_found
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(Empty, x, d, r, _) -> (x, d)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | Node(l, x, d, r, _) -> min_binding l
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec max_binding = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml
#                          ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> raise Not_found
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, x, d, Empty, _) -> (x, d)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | Node(l, x, d, r, _) -> max_binding r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec remove_min_binding = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml
#                                 ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> invalid_arg "Map.remove_min_elt"
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                              ^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml string.quoted.double.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>      | Node(Empty, x, d, r, _) -> r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                  ^^^ source.ocaml meta.module.structure.ocaml
>      | Node(l, x, d, r, _) -> bal (remove_min_binding l) x d r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                         ^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let merge t1 t2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match (t1, t2) with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        (Empty, t) -> t
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
>      | (t, Empty) -> t
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
>      | (_, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let (x, d) = min_binding t2 in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                      ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          bal t1 x d (remove_min_binding t2)
#^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec remove x = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          Empty
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, v, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let c = Ord.compare x v in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if c = 0 then
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            merge l r
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>          else if c < 0 then
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            bal (remove x l) v d r
#^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^^^^^^^ source.ocaml meta.module.structure.ocaml
>          else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            bal l v d (remove x r)
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec iter f = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> ()
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.language.pseudo-variable.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml constant.language.pseudo-variable.ocaml meta.empty-typing-pair.parens.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          iter f l; f v d; iter f r
#^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                   ^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                          ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec map f = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml
#                    ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          Empty
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, v, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let l' = map f l in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let d' = f d in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^ source.ocaml meta.module.structure.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let r' = map f r in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          Node(l', v, d', r', h)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec mapi f = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          Empty
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, v, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let l' = mapi f l in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let d' = f v d in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let r' = mapi f r in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          Node(l', v, d', r', h)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec fold f m accu =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match m with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^ source.ocaml meta.module.structure.ocaml
#              ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> accu
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          fold f r (f v d (fold f l accu))
#^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec for_all p = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> true
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>      | Node(l, v, d, r, _) -> p v d && for_all p l && for_all p r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                     ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                       ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                    ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                                      ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec exists p = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> false
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>      | Node(l, v, d, r, _) -> p v d || exists p l || exists p r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.language.universal-match.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                     ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                       ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                   ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                                     ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    (* Beware: those two functions assume that the added k is *strictly*
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       smaller (or bigger) than all the present keys in the tree; it
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       does not test for equality with the current min (or max) key.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>
>       Indeed, they are only used during the "join" operation which
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       respects this precondition.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>    *)
#^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>    let rec add_min_binding k v = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml
#                                  ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | Empty -> singleton k v
#^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>      | Node (l, x, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>        bal (add_min_binding k v l) x d r
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec add_max_binding k v = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml
#                                  ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | Empty -> singleton k v
#^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>      | Node (l, x, d, r, h) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>        bal l x d (add_max_binding k v r)
#^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    (* Same as create and bal, but no assumptions are made on the
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       relative heights of l and r. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>    let rec join l v d r =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match (l, r) with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        (Empty, _) -> add_min_binding v d r
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>      | (_, Empty) -> add_max_binding v d l
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>      | (Node(ll, lv, ld, lr, lh), Node(rl, rv, rd, rr, rh)) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                                             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          if lh > rh + 2 then bal ll lv ld (join lr v d r) else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                             ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml
#                                                           ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>          if rh > lh + 2 then bal (join l v d rl) rv rd rr else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                             ^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                 ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                           ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>          create l v d r
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    (* Merge two trees l and r into one.
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       All elements of l must precede the elements of r.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
>       No assumption on the heights of l and r. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>    let concat t1 t2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match (t1, t2) with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        (Empty, t) -> t
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
>      | (t, Empty) -> t
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
>      | (_, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let (x, d) = min_binding t2 in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                      ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          join t1 x d (remove_min_binding t2)
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let concat_or_join t1 v d t2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match d with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^ source.ocaml meta.module.structure.ocaml
#              ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | Some d -> join t1 v d t2
#^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                 ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>      | None -> concat t1 t2
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec split x = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          (Empty, None, Empty)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#           ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let c = Ord.compare x v in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if c = 0 then (l, Some d, r)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>          else if c < 0 then
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>          else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec merge f s1 s2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match (s1, s2) with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^ source.ocaml meta.module.structure.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#             ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        (Empty, Empty) -> Empty
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml
#                          ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | (Node (l1, v1, d1, r1, h1), _) when h1 >= height s2 ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                       ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-condition.ocaml
#                                           ^^^^ source.ocaml meta.module.structure.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                                 ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                            ^^ source.ocaml meta.module.structure.ocaml punctuation.separator.function-return.ocaml
>          let (l2, d2, r2) = split v1 s2 in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                            ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                         ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                                       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                           ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.module.structure.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                 ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | (_, Node (l2, v2, d2, r2, h2)) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#          ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          let (l1, d1, r1) = split v2 s1 in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                            ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                         ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                      ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                                          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.module.structure.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                 ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | _ ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          assert false
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>
>    let rec filter p = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> Empty
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          (* call [p] in the expected left-to-right order *)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                          ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>          let l' = filter p l in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let pvd = p v d in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let r' = filter p r in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if pvd then join l' v d r' else concat l' r'
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                     ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                     ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                                         ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec partition p = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml
#                          ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> (Empty, Empty)
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                  ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      | Node(l, v, d, r, _) ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          (* call [p] in the expected left-to-right order *)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                          ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>          let (lt, lf) = partition p l in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                        ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                       ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let pvd = p v d in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^^^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^^^^^ source.ocaml meta.module.structure.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          let (rt, rf) = partition p r in
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#             ^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                        ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                       ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>          if pvd
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml
>          then (join lt v d rt, concat lf rf)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>          else (concat lt rt, join lf v d rf)
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration
#^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#         ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml entity.name.type.variant.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.variant-definition.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml entity.name.type.variant.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                     ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                        ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                              ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                 ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                   ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.operator.infix.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                          ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                             ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>
>    let rec cons_enum m e =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      match m with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^ source.ocaml meta.module.structure.ocaml
#              ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> e
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^ source.ocaml meta.module.structure.ocaml
>      | Node(l, v, d, r, _) -> cons_enum l (More(v, d, r, e))
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let compare cmp m1 m2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      let rec compare_aux e1 e2 =
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#              ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                             ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>          match (e1, e2) with
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>          (End, End) -> 0
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
>        | (End, _)  -> -1
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
>        | (_, End) -> 1
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
>        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>            let c = Ord.compare v1 v2 in
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml
#                    ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                        ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>            if c <> 0 then c else
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            let c = cmp d1 d2 in
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>            if c <> 0 then c else
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#              ^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                           ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      in compare_aux (cons_enum m1 End) (cons_enum m2 End)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#        ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                      ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                         ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                      ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let equal cmp m1 m2 =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#              ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      let rec equal_aux e1 e2 =
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#              ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                           ^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>          match (e1, e2) with
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                 ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>          (End, End) -> true
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>        | (End, _)  -> false
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>        | (_, End) -> false
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml
#                      ^^^^^ source.ocaml meta.module.structure.ocaml constant.language.boolean.ocaml
>        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->
#^^^^^^^^ source.ocaml meta.module.structure.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#           ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                        ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>            Ord.compare v1 v2 = 0 && cmp d1 d2 &&
#^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml
#                                  ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                    ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                               ^^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
>            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                       ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                         ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>      in equal_aux (cons_enum m1 End) (cons_enum m2 End)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#        ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>    let rec cardinal = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml
#                       ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> 0
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
>      | Node(l, _, _, r, _) -> cardinal l + 1 + cardinal r
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                           ^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                                               ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>    let rec bindings_aux accu = function
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml
#                                ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>        Empty -> accu
#^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml
>      | Node(l, v, d, r, _) -> bindings_aux ((v, d) :: bindings_aux accu r) l
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                    ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                       ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                              ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.definition.list.constructor.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                           ^^^ source.ocaml meta.module.structure.ocaml
>
>    let bindings s =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      bindings_aux [] s
#^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml constant.language.pseudo-variable.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml constant.language.pseudo-variable.ocaml meta.empty-typing-pair.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
>
>    let choose = min_binding
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^^^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
>
>end
#^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>