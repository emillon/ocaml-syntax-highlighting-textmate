>(*---------------------------------------------------------------------------
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   Copyright 2012 Daniel C. BÃ¼nzli. All rights reserved.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   Distributed under the BSD3 license, see license at the end of the file.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   %%NAME%% release %%VERSION%%
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>  ---------------------------------------------------------------------------*)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let io_buffer_size = 65536                           (* IO_BUFFER_SIZE 4.0.0 *)
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^^^^^^^^^^ source.ocaml
#                   ^ source.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml
#                     ^^^^^ source.ocaml constant.numeric.integer.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                       ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let pp = Format.fprintf
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^ source.ocaml
#       ^ source.ocaml keyword.operator.infix.ocaml
#        ^ source.ocaml
#         ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                ^^^^^^^^ source.ocaml
>let invalid_encode () = invalid_arg "expected `Await encode"
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^^ source.ocaml meta.function.ocaml variable.parameter.unit.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                       ^^^^^^^^^^^^^ source.ocaml
#                                    ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                     ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                           ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>let invalid_bounds j l =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  invalid_arg (Printf.sprintf "invalid bounds (index %d, length %d)" j l)
#^^^^^^^^^^^^^^ source.ocaml
#              ^ source.ocaml meta.paren-group.ocaml
#               ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml string.quoted.double.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                                                    ^^^^ source.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.paren-group.ocaml
>
>(* Unsafe string byte manipulations. If you don't believe the author's
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   invariants, replacing with safe versions makes everything safe in
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   the module. He won't be upset. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let unsafe_chr = Char.unsafe_chr
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^^^^^^ source.ocaml
#               ^ source.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml
#                 ^^^^^ source.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^ source.ocaml
>let unsafe_blit = String.unsafe_blit
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^^^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml
#                  ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                         ^^^^^^^^^^^^ source.ocaml
>let unsafe_array_get = Array.unsafe_get
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^^^^^^^^^^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^^^^^^ source.ocaml meta.module-reference.ocaml
#                             ^^^^^^^^^^^ source.ocaml
>let unsafe_byte s j = Char.code (String.unsafe_get s j)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^ source.ocaml
#                      ^^^^^ source.ocaml meta.module-reference.ocaml
#                           ^^^^^ source.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                        ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.paren-group.ocaml
>let unsafe_set_byte s j byte = String.unsafe_set s j (Char.unsafe_chr byte)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                              ^ source.ocaml
#                               ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                                      ^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml
#                                                      ^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                                           ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>
>(* Unicode characters *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>type uchar = int
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#             ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>let u_bom = 0xFEFF                                                   (* BOM. *)
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                       ^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let u_rep = 0xFFFD                                 (* replacement character. *)
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                   ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let is_uchar cp =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  (0x0000 <= cp && cp <= 0xD7FF) || (0xE000 <= cp && cp <= 0x10FFFF)
#^^ source.ocaml
#  ^ source.ocaml meta.paren-group.ocaml
#   ^^^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#           ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#            ^^^^ source.ocaml meta.paren-group.ocaml
#                ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                  ^^^^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
#                         ^^^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml
#                                 ^^ source.ocaml keyword.operator.infix.ocaml
#                                   ^ source.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml
#                                     ^^^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                              ^^^^ source.ocaml meta.paren-group.ocaml
#                                                  ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                    ^^^^ source.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                          ^ source.ocaml meta.paren-group.ocaml
#                                                           ^^^^^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
>
>let pp_cp ppf cp =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  if cp < 0 || cp > 0x10FFFF then pp ppf "U+Invalid(%X)" cp else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^ source.ocaml
#        ^ source.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml
#          ^ source.ocaml constant.numeric.integer.ocaml
#           ^ source.ocaml
#            ^^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^ source.ocaml
#                  ^ source.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml
#                    ^^^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml
#                             ^^^^ source.ocaml keyword.control.ocaml
#                                 ^^^^^^^^ source.ocaml
#                                         ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                          ^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                       ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                                        ^^^^ source.ocaml
#                                                            ^^^^ source.ocaml keyword.control.ocaml
>  if cp <= 0xFFFF then pp ppf "U+%04X" cp else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^ source.ocaml
#        ^ source.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^ source.ocaml
#           ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                 ^ source.ocaml
#                  ^^^^ source.ocaml keyword.control.ocaml
#                      ^^^^^^^^ source.ocaml
#                              ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                               ^^^^^^ source.ocaml string.quoted.double.ocaml
#                                     ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                      ^^^^ source.ocaml
#                                          ^^^^ source.ocaml keyword.control.ocaml
>  pp ppf "U+%X" cp
#^^^^^^^^^ source.ocaml
#         ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#          ^^^^ source.ocaml string.quoted.double.ocaml
#              ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#               ^^^^ source.ocaml
>
>let cp_to_string cp =                                    (* NOT thread safe. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                           ^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  pp Format.str_formatter "%a" pp_cp cp; Format.flush_str_formatter ()
#^^^^^ source.ocaml
#     ^^^^^^^ source.ocaml meta.module-reference.ocaml
#            ^^^^^^^^^^^^^^ source.ocaml
#                          ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                           ^^ source.ocaml string.quoted.double.ocaml
#                             ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                              ^^^^^^^^^ source.ocaml
#                                       ^ source.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml
#                                         ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                                                ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                    ^ source.ocaml constant.language.pseudo-variable.ocaml
#                                                                     ^ source.ocaml constant.language.pseudo-variable.ocaml meta.empty-typing-pair.parens.ocaml
>
>(* Unicode encoding schemes *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                            ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>type encoding = [ `UTF_8 | `UTF_16 | `UTF_16BE | `UTF_16LE ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                  ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                           ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                     ^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                 ^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>type decoder_encoding = [ encoding | `US_ASCII | `ISO_8859_1 ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                          ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                     ^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                 ^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>
>let encoding_of_string s = match String.uppercase s with      (* IANA names. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                          ^ source.ocaml
#                           ^^^^^ source.ocaml keyword.control.ocaml
#                                ^ source.ocaml
#                                 ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                                        ^^^^^^^^^^^^ source.ocaml
#                                                    ^^^^ source.ocaml keyword.control.ocaml
#                                                        ^^^^^^ source.ocaml
#                                                              ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                ^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>| "UTF-8" -> Some `UTF_8
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^ source.ocaml
#             ^^^^ source.ocaml entity.name.type.variant.ocaml
#                 ^ source.ocaml
#                  ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| "UTF-16" -> Some `UTF_16
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml entity.name.type.variant.ocaml
#                  ^ source.ocaml
#                   ^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| "UTF-16LE" -> Some `UTF_16LE
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml
#                ^^^^ source.ocaml entity.name.type.variant.ocaml
#                    ^ source.ocaml
#                     ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| "UTF-16BE" -> Some `UTF_16BE
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml
#                ^^^^ source.ocaml entity.name.type.variant.ocaml
#                    ^ source.ocaml
#                     ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| "ANSI_X3.4-1968" | "ISO-IR-6" | "ANSI_X3.4-1986" | "ISO_646.IRV:1991"
#^ source.ocaml keyword.operator.infix.ocaml
# ^ source.ocaml
#  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#   ^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                      ^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                              ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                               ^ source.ocaml
#                                ^ source.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                   ^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                                  ^ source.ocaml
#                                                   ^ source.ocaml keyword.operator.infix.ocaml
#                                                    ^ source.ocaml
#                                                     ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                                      ^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                                      ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| "ASCII" | "ISO646-US" | "US-ASCII" | "US" | "IBM367" | "CP367" | "CSASCII" ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#             ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                      ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                           ^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                    ^ source.ocaml meta.pattern-match.ocaml
#                                     ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                      ^ source.ocaml meta.pattern-match.ocaml
#                                       ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                        ^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                          ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml
#                                            ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                             ^ source.ocaml meta.pattern-match.ocaml
#                                              ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                               ^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                      ^ source.ocaml meta.pattern-match.ocaml
#                                                       ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                                        ^ source.ocaml meta.pattern-match.ocaml
#                                                         ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                          ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                               ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                                ^ source.ocaml meta.pattern-match.ocaml
#                                                                 ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                                                  ^ source.ocaml meta.pattern-match.ocaml
#                                                                   ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                                    ^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                                           ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                                            ^ source.ocaml meta.pattern-match.ocaml
#                                                                             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    Some `US_ASCII
#^^^^ source.ocaml
#    ^^^^ source.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml
#         ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| "ISO_8859-1:1987" | "ISO-IR-100" | "ISO_8859-1" | "ISO-8859-1"
#^ source.ocaml keyword.operator.infix.ocaml
# ^ source.ocaml
#  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#   ^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                   ^ source.ocaml
#                    ^ source.ocaml keyword.operator.infix.ocaml
#                     ^ source.ocaml
#                      ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                       ^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                  ^ source.ocaml
#                                   ^ source.ocaml keyword.operator.infix.ocaml
#                                    ^ source.ocaml
#                                     ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                      ^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                                 ^ source.ocaml
#                                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                                   ^ source.ocaml
#                                                    ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                                     ^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                               ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| "LATIN1" | "L1" | "IBM819" | "CP819" | "CSISOLATIN1" ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#   ^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml
#                    ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                     ^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                     ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                      ^ source.ocaml meta.pattern-match.ocaml
#                                       ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                        ^ source.ocaml meta.pattern-match.ocaml
#                                         ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                          ^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml comment.block.string.quoted.double.ocaml
#                                                      ^ source.ocaml meta.pattern-match.ocaml
#                                                       ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    Some `ISO_8859_1
#^^^^ source.ocaml
#    ^^^^ source.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml
#         ^^^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| _ -> None
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#      ^ source.ocaml
#       ^^^^ source.ocaml entity.name.type.variant.ocaml
>
>let encoding_to_string = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^ source.ocaml
#                         ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `UTF_8 -> "UTF-8" | `UTF_16 -> "UTF-16" | `UTF_16BE -> "UTF-16BE"
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^ source.ocaml
#            ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#             ^^^^^ source.ocaml string.quoted.double.ocaml
#                  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                   ^ source.ocaml
#                    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                     ^ source.ocaml meta.pattern-match.ocaml
#                      ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml
#                              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                ^ source.ocaml
#                                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                  ^^^^^^ source.ocaml string.quoted.double.ocaml
#                                        ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                         ^ source.ocaml
#                                          ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml
#                                            ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml
#                                                      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                        ^ source.ocaml
#                                                         ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                                          ^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                                  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| `UTF_16LE -> "UTF-16LE" | `US_ASCII -> "US-ASCII"
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^ source.ocaml
#               ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                ^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                        ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                         ^ source.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml
#                            ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                                     ^ source.ocaml meta.pattern-match.ocaml
#                                      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                        ^ source.ocaml
#                                         ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                          ^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                                  ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| `ISO_8859_1 -> "ISO-8859-1"
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^ source.ocaml
#                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                  ^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                            ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>
>(* Base character decoders. They assume enough data. *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let malformed s j l = `Malformed (String.sub s j l)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^ source.ocaml
#                      ^^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                ^ source.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml
#                                  ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                         ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
>let malformed_pair be hi s j l =    (* missing or half low surrogate at eoi. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.function.ocaml
#                               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                                ^^^^ source.ocaml
#                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let bs1 = String.sub s j l in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                   ^^^^^^^^^^ source.ocaml
#                             ^^ source.ocaml keyword.other.ocaml
>  let bs0 = String.create 2 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                   ^^^^^^^ source.ocaml
#                          ^ source.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>  let j0, j1 = if be then (0, 1) else (1, 0) in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml
#               ^^ source.ocaml keyword.control.ocaml
#                 ^^^^ source.ocaml
#                     ^^^^ source.ocaml keyword.control.ocaml
#                         ^ source.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                            ^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml
#                                 ^^^^ source.ocaml keyword.control.ocaml
#                                     ^ source.ocaml
#                                      ^ source.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                        ^^ source.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml
#                                             ^^ source.ocaml keyword.other.ocaml
>  unsafe_set_byte bs0 j0 (hi lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.paren-group.ocaml
#                             ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml punctuation.separator.ocaml
>  unsafe_set_byte bs0 j1 (hi land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml
#                                  ^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml punctuation.separator.ocaml
>  `Malformed (bs0 ^ bs1)
#^^ source.ocaml
#  ^^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml
#             ^ source.ocaml meta.paren-group.ocaml
#              ^^^^ source.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                   ^^^^ source.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml
>
>let r_us_ascii s j =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  (* assert (0 <= j && j < String.length s); *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let b0 = unsafe_byte s j in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^^ source.ocaml keyword.other.ocaml
>  if b0 <= 127 then `Uchar b0 else malformed s j 1
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^ source.ocaml
#        ^ source.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^ source.ocaml
#           ^^^ source.ocaml constant.numeric.integer.ocaml
#              ^ source.ocaml
#               ^^^^ source.ocaml keyword.control.ocaml
#                   ^ source.ocaml
#                    ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                          ^^^^ source.ocaml
#                              ^^^^ source.ocaml keyword.control.ocaml
#                                  ^^^^^^^^^^^^^^^ source.ocaml
#                                                 ^ source.ocaml constant.numeric.integer.ocaml
>
>let r_iso_8859_1 s j =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  (* assert (0 <= j && j < String.length s); *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  `Uchar (unsafe_byte s j)
#^^ source.ocaml
#  ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml
#         ^ source.ocaml meta.paren-group.ocaml
#          ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml
>
>let utf_8_len = [| (* uchar byte length according to first UTF-8 byte. *)
#^^^ source.ocaml keyword.other.ocaml
#   ^^^^^^^^^^^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml
#                ^^ source.ocaml meta.array.ocaml punctuation.definition.array.begin.ocaml
#                  ^ source.ocaml meta.array.ocaml
#                   ^^ source.ocaml meta.array.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.array.ocaml comment.block.ocaml
#                                                                       ^^ source.ocaml meta.array.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  2; 2; 2; 2; 2; 2; 2; 2; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3; 3;
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                 ^ source.ocaml meta.array.ocaml
#                                                  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                    ^ source.ocaml meta.array.ocaml
#                                                     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                       ^ source.ocaml meta.array.ocaml
#                                                        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                          ^ source.ocaml meta.array.ocaml
#                                                           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                             ^ source.ocaml meta.array.ocaml
#                                                              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                ^ source.ocaml meta.array.ocaml
#                                                                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                   ^ source.ocaml meta.array.ocaml
#                                                                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                                                      ^ source.ocaml meta.array.ocaml
#                                                                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
>  4; 4; 4; 4; 4; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 |]
#^^ source.ocaml meta.array.ocaml
#  ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#   ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#    ^ source.ocaml meta.array.ocaml
#     ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#      ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#       ^ source.ocaml meta.array.ocaml
#        ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#         ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#          ^ source.ocaml meta.array.ocaml
#           ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#             ^ source.ocaml meta.array.ocaml
#              ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                ^ source.ocaml meta.array.ocaml
#                 ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                   ^ source.ocaml meta.array.ocaml
#                    ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml meta.array.ocaml
#                       ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml meta.array.ocaml
#                          ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                            ^ source.ocaml meta.array.ocaml
#                             ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                               ^ source.ocaml meta.array.ocaml
#                                ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml meta.array.ocaml
#                                   ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                     ^ source.ocaml meta.array.ocaml
#                                      ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                        ^ source.ocaml meta.array.ocaml
#                                         ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                           ^ source.ocaml meta.array.ocaml
#                                            ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.array.ocaml punctuation.separator.ocaml
#                                              ^ source.ocaml meta.array.ocaml
#                                               ^ source.ocaml meta.array.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.array.ocaml
#                                                 ^^ source.ocaml meta.array.ocaml punctuation.definition.array.end.ocaml
>
>let r_utf_8 s j l =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  (* assert (0 <= j && 0 <= l && j + l <= String.length s); *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                            ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  match l with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^ source.ocaml
#          ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | 1 -> `Uchar (unsafe_byte s j)
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#        ^ source.ocaml
#         ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#               ^ source.ocaml
#                ^ source.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
>  | 2 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      let b0 = unsafe_byte s j in let b1 = unsafe_byte s (j + 1) in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
#                               ^^ source.ocaml keyword.other.ocaml
#                                 ^ source.ocaml
#                                  ^^^ source.ocaml keyword.other.ocaml
#                                     ^^^^ source.ocaml
#                                         ^ source.ocaml keyword.operator.infix.ocaml
#                                          ^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^ source.ocaml keyword.other.ocaml
>      if b1 lsr 6 != 0b10 then malformed s j l else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^ source.ocaml
#            ^^^ source.ocaml keyword.operator.ocaml
#               ^ source.ocaml
#                ^ source.ocaml constant.numeric.integer.ocaml
#                 ^ source.ocaml
#                  ^^ source.ocaml keyword.operator.symbol.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^^^ source.ocaml keyword.control.ocaml
#                              ^^^^^^^^^^^^^^^^^ source.ocaml
#                                               ^^^^ source.ocaml keyword.control.ocaml
>      `Uchar (((b0 land 0x1F) lsl 6) lor (b1 land 0x3F))
#^^^^^^ source.ocaml
#      ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml
#             ^ source.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml
#                                     ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.paren-group.ocaml
>  | 3 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      let b0 = unsafe_byte s j in let b1 = unsafe_byte s (j + 1) in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
#                               ^^ source.ocaml keyword.other.ocaml
#                                 ^ source.ocaml
#                                  ^^^ source.ocaml keyword.other.ocaml
#                                     ^^^^ source.ocaml
#                                         ^ source.ocaml keyword.operator.infix.ocaml
#                                          ^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^ source.ocaml keyword.other.ocaml
>      let b2 = unsafe_byte s (j + 2) in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^^^^^^ source.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml
#                              ^^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml
#                                     ^^ source.ocaml keyword.other.ocaml
>      let c = `Uchar (((b0 land 0x0F) lsl 12) lor
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^ source.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^ source.ocaml
#              ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
>                      ((b1 land 0x3F) lsl 6) lor
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
>          (b2 land 0x3F))
#^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#           ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#              ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
>      in
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.other.ocaml
>      if b2 lsr 6 != 0b10 then malformed s j l else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^ source.ocaml
#            ^^^ source.ocaml keyword.operator.ocaml
#               ^ source.ocaml
#                ^ source.ocaml constant.numeric.integer.ocaml
#                 ^ source.ocaml
#                  ^^ source.ocaml keyword.operator.symbol.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^^^ source.ocaml keyword.control.ocaml
#                              ^^^^^^^^^^^^^^^^^ source.ocaml
#                                               ^^^^ source.ocaml keyword.control.ocaml
>      begin match b0 with
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#           ^ source.ocaml meta.begin-end-group.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                 ^^^^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | 0xE0 -> if b1 < 0xA0 || 0xBF < b1 then malformed s j l else c
#^^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml
#                ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                  ^^^^ source.ocaml meta.begin-end-group.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml
#                                          ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                              ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                               ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                                   ^^^ source.ocaml meta.begin-end-group.ocaml
>      | 0xED -> if b1 < 0x80 || 0x9F < b1 then malformed s j l else c
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml
#                ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                  ^^^^ source.ocaml meta.begin-end-group.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml
#                                          ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                              ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                               ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                                   ^^^ source.ocaml meta.begin-end-group.ocaml
>      | _ -> if b1 lsr 6 != 0b10 then malformed s j l else c
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#         ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#               ^^^^ source.ocaml meta.begin-end-group.ocaml
#                   ^^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml
#                            ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml
#                                 ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                     ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                      ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                          ^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>  | 4 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      let b0 = unsafe_byte s j in let b1 = unsafe_byte s (j + 1) in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
#                               ^^ source.ocaml keyword.other.ocaml
#                                 ^ source.ocaml
#                                  ^^^ source.ocaml keyword.other.ocaml
#                                     ^^^^ source.ocaml
#                                         ^ source.ocaml keyword.operator.infix.ocaml
#                                          ^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^ source.ocaml keyword.other.ocaml
>      let b2 = unsafe_byte s (j + 2) in let b3 = unsafe_byte s (j + 3) in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^^^^^^^ source.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml
#                              ^^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml
#                                     ^^ source.ocaml keyword.other.ocaml
#                                       ^ source.ocaml
#                                        ^^^ source.ocaml keyword.other.ocaml
#                                           ^^^^ source.ocaml
#                                               ^ source.ocaml keyword.operator.infix.ocaml
#                                                ^^^^^^^^^^^^^^^ source.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^^ source.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                     ^ source.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml
#                                                                       ^^ source.ocaml keyword.other.ocaml
>      let c = `Uchar (((b0 land 0x07) lsl 18) lor
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^ source.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^ source.ocaml
#              ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
>                      ((b1 land 0x3F) lsl 12) lor
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
>          ((b2 land 0x3F) lsl 6) lor
#^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#           ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#            ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#               ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
>                      (b3 land 0x3F))
#^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                       ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml
>      in
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.other.ocaml
>      if b3 lsr 6 != 0b10 || b2 lsr 6 != 0b10 then malformed s j l else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^ source.ocaml
#            ^^^ source.ocaml keyword.operator.ocaml
#               ^ source.ocaml
#                ^ source.ocaml constant.numeric.integer.ocaml
#                 ^ source.ocaml
#                  ^^ source.ocaml keyword.operator.symbol.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^ source.ocaml keyword.operator.infix.ocaml
#                            ^^^^ source.ocaml
#                                ^^^ source.ocaml keyword.operator.ocaml
#                                   ^ source.ocaml
#                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                     ^ source.ocaml
#                                      ^^ source.ocaml keyword.operator.symbol.ocaml
#                                        ^ source.ocaml
#                                         ^^^^ source.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml
#                                              ^^^^ source.ocaml keyword.control.ocaml
#                                                  ^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                   ^^^^ source.ocaml keyword.control.ocaml
>      begin match b0 with
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#           ^ source.ocaml meta.begin-end-group.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                 ^^^^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | 0xF0 -> if b1 < 0x90 || 0xBF < b1 then malformed s j l else c
#^^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml
#                ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                  ^^^^ source.ocaml meta.begin-end-group.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml
#                                          ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                              ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                               ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                                   ^^^ source.ocaml meta.begin-end-group.ocaml
>      | 0xF4 -> if b1 < 0x80 || 0x8F < b1 then malformed s j l else c
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml
#                ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                  ^^^^ source.ocaml meta.begin-end-group.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml
#                                          ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                              ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                               ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                                   ^^^ source.ocaml meta.begin-end-group.ocaml
>      | _ -> if b1 lsr 6 != 0b10 then malformed s j l else c
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#         ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#               ^^^^ source.ocaml meta.begin-end-group.ocaml
#                   ^^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml
#                            ^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml
#                                 ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                     ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                                      ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                                                          ^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>  | _ -> assert false
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#        ^ source.ocaml
#         ^^^^^^ source.ocaml keyword.other.ocaml
#               ^ source.ocaml
#                ^^^^^ source.ocaml constant.language.boolean.ocaml
>
>let r_utf_16 s j0 j1 =                       (* May return a high surrogate. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  (* assert (0 <= j0 && 0 <= j1 && max j0 j1 < String.length s); *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let b0 = unsafe_byte s j0 in let b1 = unsafe_byte s j1 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
#                              ^ source.ocaml
#                               ^^^ source.ocaml keyword.other.ocaml
#                                  ^^^^ source.ocaml
#                                      ^ source.ocaml keyword.operator.infix.ocaml
#                                       ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^^ source.ocaml keyword.other.ocaml
>  let u = (b0 lsl 8) lor b1 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^ source.ocaml
#          ^ source.ocaml meta.paren-group.ocaml
#           ^^^ source.ocaml meta.paren-group.ocaml
#              ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml
#                     ^^^ source.ocaml keyword.operator.ocaml
#                        ^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>  if u < 0xD800 || u > 0xDFFF then `Uchar u else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^ source.ocaml
#       ^ source.ocaml keyword.operator.symbol.ocaml
#        ^ source.ocaml
#         ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml
#                ^^ source.ocaml keyword.operator.infix.ocaml
#                  ^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.symbol.ocaml
#                      ^ source.ocaml
#                       ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml
#                              ^^^^ source.ocaml keyword.control.ocaml
#                                  ^ source.ocaml
#                                   ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                         ^^^ source.ocaml
#                                            ^^^^ source.ocaml keyword.control.ocaml
>  if u > 0xDBFF then malformed s (min j0 j1) 2 else `Hi u
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^ source.ocaml
#       ^ source.ocaml keyword.operator.symbol.ocaml
#        ^ source.ocaml
#         ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml
#                ^^^^ source.ocaml keyword.control.ocaml
#                    ^^^^^^^^^^^^^ source.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml
#                                  ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml
#                                             ^ source.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml
#                                               ^^^^ source.ocaml keyword.control.ocaml
#                                                   ^ source.ocaml
#                                                    ^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                       ^^^ source.ocaml
>
>let r_utf_16_lo hi s j0 j1 =          (* Combines [hi] with a low surrogate. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                            ^^^^^^^^^^ source.ocaml
#                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  (* assert (0 <= j0 && 0 <= j1 && max j0 j1 < String.length s); *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let b0 = unsafe_byte s j0 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>  let b1 = unsafe_byte s j1 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>  let lo = (b0 lsl 8) lor b1 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^ source.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^^^ source.ocaml meta.paren-group.ocaml
#               ^^^ source.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml
#                      ^^^ source.ocaml keyword.operator.ocaml
#                         ^^^^ source.ocaml
#                             ^^ source.ocaml keyword.other.ocaml
>  if lo < 0xDC00 || lo > 0xDFFF
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^ source.ocaml
#        ^ source.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml
#          ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml
#                 ^^ source.ocaml keyword.operator.infix.ocaml
#                   ^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.symbol.ocaml
#                        ^ source.ocaml
#                         ^^^^^^ source.ocaml constant.numeric.integer.ocaml
>  then malformed_pair (j0 < j1 (* true => be *)) hi s (min j0 j1) 2
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^ source.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml
#                       ^^^ source.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                           ^^^^ source.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.paren-group.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                 ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml comment.block.ocaml
#                                             ^^ source.ocaml meta.paren-group.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml
#                                                ^^^^^^ source.ocaml
#                                                      ^ source.ocaml meta.paren-group.ocaml
#                                                       ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml
#                                                                  ^ source.ocaml constant.numeric.integer.ocaml
>  else `Uchar ((((hi land 0x3FF) lsl 10) lor (lo land 0x3FF)) + 0x10000)
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^ source.ocaml
#       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml
#              ^ source.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                     ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                      ^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^^^^^^^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                       ^ source.ocaml meta.paren-group.ocaml
>
>let r_encoding s j l =                  (* guess encoding with max. 3 bytes. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  (* assert (0 <= j && 0 <= l && j + l <= String.length s) *)
#^^ source.ocaml
#  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                           ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let some i = if i < l then Some (unsafe_byte s (j + i)) else None in
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#              ^ source.ocaml
#               ^^ source.ocaml keyword.control.ocaml
#                 ^^^ source.ocaml
#                    ^ source.ocaml keyword.operator.symbol.ocaml
#                     ^^^ source.ocaml
#                        ^^^^ source.ocaml keyword.control.ocaml
#                            ^ source.ocaml
#                             ^^^^ source.ocaml entity.name.type.variant.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                     ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml
#                                                          ^^^^ source.ocaml keyword.control.ocaml
#                                                              ^ source.ocaml
#                                                               ^^^^ source.ocaml entity.name.type.variant.ocaml
#                                                                   ^ source.ocaml
#                                                                    ^^ source.ocaml keyword.other.ocaml
>  match (some 0), (some 1), (some 2) with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^ source.ocaml
#        ^ source.ocaml meta.paren-group.ocaml
#         ^^^^^ source.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.paren-group.ocaml
#                ^^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^ source.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml
#                                     ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | Some 0xEF, Some 0xBB, Some 0xBF                 -> `UTF_8 `BOM
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml
#                    ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#                                   ^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | Some 0xFE, Some 0xFF, _                         -> `UTF_16BE `BOM
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml
#                    ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | Some 0xFF, Some 0xFE, _                         -> `UTF_16LE `BOM
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml
#                    ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | Some 0x00, Some    p, _              when p > 0 -> `UTF_16BE (`ASCII p)
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^ source.ocaml meta.pattern-match.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                         ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-condition.ocaml
#                                             ^^^ source.ocaml
#                                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                                 ^ source.ocaml
#                                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml
#                                                    ^^ source.ocaml punctuation.separator.function-return.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^ source.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml
#                                                                  ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                        ^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>  | Some    p, Some 0x00, _              when p > 0 -> `UTF_16LE (`ASCII p)
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml
#                    ^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                         ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-condition.ocaml
#                                             ^^^ source.ocaml
#                                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                                 ^ source.ocaml
#                                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml
#                                                    ^^ source.ocaml punctuation.separator.function-return.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^ source.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml
#                                                                  ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                        ^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>  | Some    u,         _, _ when utf_8_len.(u) <> 0 -> `UTF_8 `Decode
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml
#                            ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-condition.ocaml
#                                ^^^^^^^^^^^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml
#                                               ^ source.ocaml keyword.operator.symbol.ocaml
#                                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                                 ^ source.ocaml
#                                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml
#                                                    ^^ source.ocaml punctuation.separator.function-return.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | Some    _, Some    _, _                         -> `UTF_16BE `Decode
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^ source.ocaml meta.pattern-match.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^ source.ocaml
#                                                                 ^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | Some    _, None     , None                      -> `UTF_8 `Decode
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                          ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                              ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | None     , None     , None                      -> `UTF_8 `End
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                          ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                              ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>  | None     , Some    _, _                         -> assert false
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^ source.ocaml meta.pattern-match.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml keyword.other.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^^ source.ocaml constant.language.boolean.ocaml
>  | Some    _, None     , Some _                    -> assert false
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                          ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                                ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml keyword.other.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^^ source.ocaml constant.language.boolean.ocaml
>  | None     , None     , Some _                    -> assert false
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#               ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                   ^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                          ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                                ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml
#                                                    ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^^^ source.ocaml keyword.other.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^^ source.ocaml constant.language.boolean.ocaml
>
>(* Decode *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^ source.ocaml comment.block.ocaml
#          ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>type src = [ `Channel of in_channel | `String of string | `Manual ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#             ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                      ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                         ^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                      ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                 ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                          ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>type nln = [ `ASCII of uchar | `NLF of uchar | `Readline of uchar ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#             ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                       ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                               ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                       ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                               ^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                         ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>type decode = [ `Await | `End | `Malformed of string | `Uchar of uchar]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                         ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                ^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                           ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                              ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                       ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                                 ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>
>let pp_decode ppf = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^ source.ocaml
#                    ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar u -> pp ppf "@[`Uchar %a@]" pp_cp u
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^^^^^^^^ source.ocaml
#                     ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                      ^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                                   ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                    ^^^^^^^^^ source.ocaml
>| `End -> pp ppf "`End"
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml
#       ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#         ^^^^^^^^ source.ocaml
#                 ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                  ^^^^ source.ocaml string.quoted.double.ocaml
#                      ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| `Await -> pp ppf "`Await"
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^ source.ocaml
#                   ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                    ^^^^^^ source.ocaml string.quoted.double.ocaml
#                          ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>| `Malformed bs ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let l = String.length bs in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                   ^^^^^^^^^^ source.ocaml
#                             ^^ source.ocaml keyword.other.ocaml
>    pp ppf "@[`Malformed (";
#^^^^^^^^^^^ source.ocaml
#           ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#            ^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
#                          ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                           ^ source.ocaml punctuation.separator.ocaml
>    if l > 0 then pp ppf "%02X" (Char.code (bs.[0]));
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml
#           ^ source.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml
#             ^^^^ source.ocaml keyword.control.ocaml
#                 ^^^^^^^^ source.ocaml
#                         ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                          ^^^^ source.ocaml string.quoted.double.ocaml
#                              ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                               ^ source.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                            ^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml punctuation.definition.list.begin.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml constant.numeric.integer.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml punctuation.definition.list.end.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml punctuation.separator.ocaml
>    for i = 1 to l - 1 do pp ppf " %02X" (Char.code (bs.[i])) done;
#^^^^ source.ocaml
#    ^^^ source.ocaml meta.for-loop.ocaml keyword.control.for-loop.ocaml
#       ^^^ source.ocaml meta.for-loop.ocaml
#          ^ source.ocaml meta.for-loop.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml meta.for-loop.ocaml
#            ^ source.ocaml meta.for-loop.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml meta.for-loop.ocaml
#              ^^ source.ocaml meta.for-loop.ocaml keyword.control.ocaml
#                ^^^ source.ocaml meta.for-loop.ocaml
#                   ^ source.ocaml meta.for-loop.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml meta.for-loop.ocaml
#                     ^ source.ocaml meta.for-loop.ocaml constant.numeric.integer.ocaml
#                      ^ source.ocaml meta.for-loop.ocaml
#                       ^^ source.ocaml meta.for-loop.ocaml keyword.control.loop.ocaml
#                         ^^^^^^^^ source.ocaml meta.for-loop.ocaml
#                                 ^ source.ocaml meta.for-loop.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                  ^^^^^ source.ocaml meta.for-loop.ocaml string.quoted.double.ocaml
#                                       ^ source.ocaml meta.for-loop.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                        ^ source.ocaml meta.for-loop.ocaml
#                                         ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml
#                                          ^^^^^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                               ^^^^^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^^^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml punctuation.definition.list.begin.ocaml
#                                                         ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml
#                                                          ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.list.ocaml punctuation.definition.list.end.ocaml
#                                                           ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.for-loop.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.for-loop.ocaml
#                                                              ^^^^ source.ocaml meta.for-loop.ocaml keyword.control.for-loop.ocaml
#                                                                  ^ source.ocaml punctuation.separator.ocaml
>    pp ppf ")@]"
#^^^^^^^^^^^ source.ocaml
#           ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#            ^^^ source.ocaml string.quoted.double.ocaml
#               ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>
>type decoder =
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
>  { src : src;                                              (* input source. *)
#^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#          ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                            ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                              ^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable encoding : decoder_encoding;                (* decoded encoding. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                       ^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                                        ^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                          ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    nln : nln option;                     (* newline normalization (if any). *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#          ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                     ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                          ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    nl : int;                            (* newline normalization character. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#         ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                         ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable i : string;                              (* current input chunk. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                     ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                       ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable i_pos : int;                          (* input current position. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                  ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable i_max : int;                          (* input maximal position. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                  ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    t : string;        (* four bytes temporary buffer for overlapping reads. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#        ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#               ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                       ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable t_len : int;                      (* current byte length of [t]. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable t_need : int;                  (* number of bytes needed in [t]. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                     ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                         ^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                           ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable removed_bom : bool;     (* [true] if an initial BOM was removed. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                          ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                               ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable last_cr : bool;                   (* [true] if last char was CR. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                      ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                           ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable line : int;                                      (* line number. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                   ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                               ^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable col : int;                                     (* column number. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                           ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                             ^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable byte_count : int;                                 (* byte count. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                         ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                ^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable count : int;                                      (* char count. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                ^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable pp :        (* decoder post-processor for BOM, position and nln. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>      decoder -> [ `Malformed of string | `Uchar of uchar ] -> decode;
#^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#      ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.separator.function-return.ocaml
#                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                   ^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                 ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                          ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                 ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                    ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                                                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                                                            ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.separator.function-return.ocaml
#                                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                                                               ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                                                                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
>    mutable k : decoder -> decode }                 (* decoder continuation. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.separator.function-return.ocaml
#                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                           ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#                                   ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>(* On decodes that overlap two (or more) [d.i] buffers, we use [t_fill] to copy
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   the input data to [d.t] and decode from there. If the [d.i] buffers are not
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   too small this is faster than continuation based byte per byte writes.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   End of input (eoi) is signalled by [d.i_pos = 0] and [d.i_max = min_int]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   which implies that [i_rem d < 0] is [true]. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                               ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let i_rem d = d.i_max - d.i_pos + 1     (* remaining bytes to read in [d.i]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.infix.ocaml
#                       ^^^^^^^^^ source.ocaml
#                                ^ source.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                   ^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let eoi d = d.i <- ""; d.i_pos <- 0; d.i_max <- min_int   (* set eoi in [d]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#           ^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                    ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                     ^ source.ocaml punctuation.separator.ocaml
#                      ^^^^^^^^^ source.ocaml
#                               ^ source.ocaml keyword.operator.symbol.ocaml
#                                ^ source.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml punctuation.separator.ocaml
#                                    ^^^^^^^^^ source.ocaml
#                                             ^ source.ocaml keyword.operator.symbol.ocaml
#                                              ^ source.ocaml keyword.operator.infix.ocaml
#                                               ^^^^^^^^^^^ source.ocaml
#                                                          ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                            ^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let src d s j l =                                     (* set [d.i] with [s]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                        ^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  if (j < 0 || l < 0 || j + l > String.length s) then invalid_bounds j l else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^ source.ocaml
#     ^ source.ocaml meta.paren-group.ocaml
#      ^^ source.ocaml meta.paren-group.ocaml
#        ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#              ^^^ source.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                       ^^^ source.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                           ^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml
#                                ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                       ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml
#                                                 ^^^^ source.ocaml keyword.control.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                         ^^^^ source.ocaml keyword.control.ocaml
>  if (l = 0) then eoi d else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^ source.ocaml
#     ^ source.ocaml meta.paren-group.ocaml
#      ^^ source.ocaml meta.paren-group.ocaml
#        ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#         ^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^ source.ocaml
#             ^^^^ source.ocaml keyword.control.ocaml
#                 ^^^^^^^ source.ocaml
#                        ^^^^ source.ocaml keyword.control.ocaml
>  (d.i <- s; d.i_pos <- j; d.i_max <- j + l - 1)
#^^ source.ocaml
#  ^ source.ocaml meta.paren-group.ocaml
#   ^^^^ source.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#        ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#         ^^ source.ocaml meta.paren-group.ocaml
#           ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#            ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                       ^^ source.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                          ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                     ^^^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                         ^^^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml
>
>let refill k d = match d.src with  (* get new input in [d.i] and [k]ontinue. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml
#                 ^^^^^ source.ocaml keyword.control.ocaml
#                      ^^^^^^^ source.ocaml
#                             ^^^^ source.ocaml keyword.control.ocaml
#                                 ^^ source.ocaml
#                                   ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>| `Manual -> d.k <- k; `Await
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^^ source.ocaml
#                     ^ source.ocaml punctuation.separator.ocaml
#                      ^ source.ocaml
#                       ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| `String _ -> eoi d; k d
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^ source.ocaml
#                    ^ source.ocaml punctuation.separator.ocaml
#                     ^^^^^ source.ocaml
>| `Channel ic ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let rc = input ic d.i 0 (String.length d.i) in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^^^^^^ source.ocaml
#                          ^ source.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                    ^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml
#                                                ^^ source.ocaml keyword.other.ocaml
>    (src d d.i 0 rc; k d)
#^^^^ source.ocaml
#    ^ source.ocaml meta.paren-group.ocaml
#     ^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                ^^^ source.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                    ^^^^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
>
>let t_need d need = d.t_len <- 0; d.t_need <- need
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^^^ source.ocaml
#                            ^ source.ocaml keyword.operator.symbol.ocaml
#                             ^ source.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml
#                               ^ source.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml punctuation.separator.ocaml
#                                 ^^^^^^^^^^ source.ocaml
#                                           ^ source.ocaml keyword.operator.symbol.ocaml
#                                            ^ source.ocaml keyword.operator.infix.ocaml
#                                             ^^^^^^ source.ocaml
>let rec t_fill k d =      (* get [d.t_need] bytes (or less if eoi) in [i.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^^^^^^ source.ocaml
#                          ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let blit d l =
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>    unsafe_blit d.i d.i_pos d.t d.t_len (* write pos. *) l;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                                        ^^ source.ocaml
#                                                          ^ source.ocaml punctuation.separator.ocaml
>    d.i_pos <- d.i_pos + l; d.t_len <- d.t_len + l;
#^^^^^^^^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.symbol.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^^ source.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
#                           ^^^^^^^^^ source.ocaml
#                                    ^ source.ocaml keyword.operator.symbol.ocaml
#                                     ^ source.ocaml keyword.operator.infix.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml keyword.operator.infix.ocaml
#                                                ^^ source.ocaml
#                                                  ^ source.ocaml punctuation.separator.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem < 0 (* eoi *) then k d else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml
#           ^ source.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml
#             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#               ^^^^^ source.ocaml comment.block.ocaml
#                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                      ^ source.ocaml
#                       ^^^^ source.ocaml keyword.control.ocaml
#                           ^^^^^ source.ocaml
#                                ^^^^ source.ocaml keyword.control.ocaml
>  let need = d.t_need - d.t_len in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.infix.ocaml
#                       ^^^^^^^^^ source.ocaml
#                                ^^ source.ocaml keyword.other.ocaml
>  if rem < need then (blit d rem; refill (t_fill k) d) else (blit d need; k d)
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^^^^^^ source.ocaml
#                ^^^^ source.ocaml keyword.control.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                 ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^^ source.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml
#                                                       ^^^^ source.ocaml keyword.control.ocaml
#                                                           ^ source.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml
#                                                             ^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                                         ^^^^ source.ocaml meta.paren-group.ocaml
#                                                                             ^ source.ocaml meta.paren-group.ocaml
>
>let ret k v byte_count d =                     (* return post-processed [v]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^^^^^^^^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                               ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  d.k <- k; d.byte_count <- d.byte_count + byte_count; d.pp d v
#^^^^^^ source.ocaml
#      ^ source.ocaml keyword.operator.symbol.ocaml
#       ^ source.ocaml keyword.operator.infix.ocaml
#        ^^ source.ocaml
#          ^ source.ocaml punctuation.separator.ocaml
#           ^^^^^^^^^^^^^^ source.ocaml
#                         ^ source.ocaml keyword.operator.symbol.ocaml
#                          ^ source.ocaml keyword.operator.infix.ocaml
#                           ^^^^^^^^^^^^^^ source.ocaml
#                                         ^ source.ocaml keyword.operator.infix.ocaml
#                                          ^^^^^^^^^^^ source.ocaml
#                                                     ^ source.ocaml punctuation.separator.ocaml
#                                                      ^^^^^^^^^^ source.ocaml
>
>(* Decoders. *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^ source.ocaml comment.block.ocaml
#             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let rec decode_us_ascii d =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem <= 0 then (if rem < 0 then `End else refill decode_us_ascii d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml keyword.control.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.paren-group.ocaml
#                                                                       ^ source.ocaml
#                                                                        ^^^^ source.ocaml keyword.control.ocaml
>  let j = d.i_pos in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^^^^^^^^^ source.ocaml
#                  ^^ source.ocaml keyword.other.ocaml
>  d.i_pos <- d.i_pos + 1; ret decode_us_ascii (r_us_ascii d.i j) 1 d
#^^^^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.symbol.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^ source.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml
#                                               ^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml
#                                                                 ^ source.ocaml constant.numeric.integer.ocaml
#                                                                  ^^^ source.ocaml
>
>let rec decode_iso_8859_1 d =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem <= 0 then (if rem < 0 then `End else refill decode_iso_8859_1 d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml keyword.control.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.paren-group.ocaml
#                                                                         ^ source.ocaml
#                                                                          ^^^^ source.ocaml keyword.control.ocaml
>  let j = d.i_pos in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^^^^^^^^^ source.ocaml
#                  ^^ source.ocaml keyword.other.ocaml
>  d.i_pos <- d.i_pos + 1; ret decode_iso_8859_1 (r_iso_8859_1 d.i j) 1 d
#^^^^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.symbol.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^ source.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml
#                                                 ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml
#                                                                     ^ source.ocaml constant.numeric.integer.ocaml
#                                                                      ^^^ source.ocaml
>
>(* UTF-8 decoder *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let rec t_decode_utf_8 d =                             (* decode from [d.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  if d.t_len < d.t_need
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^^^^^ source.ocaml
>  then ret decode_utf_8 (malformed d.t 0 d.t_len) d.t_len d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                        ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml
#                                                 ^^^^^^^^^^^ source.ocaml
>  else ret decode_utf_8 (r_utf_8 d.t 0 d.t_len) d.t_len d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml
#                                               ^^^^^^^^^^^ source.ocaml
>
>and decode_utf_8 d =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem <= 0 then (if rem < 0 then `End else refill decode_utf_8 d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml keyword.control.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml
#                                                                     ^^^^ source.ocaml keyword.control.ocaml
>  let need = unsafe_array_get utf_8_len (unsafe_byte d.i d.i_pos) in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml
#                                                                  ^^ source.ocaml keyword.other.ocaml
>  if rem < need then (t_need d need; t_fill t_decode_utf_8 d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^^^^^^ source.ocaml
#                ^^^^ source.ocaml keyword.control.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml
#                                                              ^^^^ source.ocaml keyword.control.ocaml
>  let j = d.i_pos in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^^^^^^^^^ source.ocaml
#                  ^^ source.ocaml keyword.other.ocaml
>  if need = 0
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
>  then (d.i_pos <- d.i_pos + 1; ret decode_utf_8 (malformed d.i j 1) 1 d)
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^ source.ocaml
#       ^ source.ocaml meta.paren-group.ocaml
#        ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                               ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                                     ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                      ^^ source.ocaml meta.paren-group.ocaml
#                                                                        ^ source.ocaml meta.paren-group.ocaml
>  else (d.i_pos <- d.i_pos + need; ret decode_utf_8 (r_utf_8 d.i j need) need d)
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^ source.ocaml
#       ^ source.ocaml meta.paren-group.ocaml
#        ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^^^^^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                  ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                        ^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                               ^ source.ocaml meta.paren-group.ocaml
>
>(* UTF-16BE decoder *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let rec t_decode_utf_16be_lo hi d =                    (* decode from [d.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                               ^ source.ocaml meta.function.ocaml
#                                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                                 ^ source.ocaml meta.function.ocaml
#                                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                                   ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let bcount = d.t_len + 2 (* hi count *) in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml
#                         ^ source.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml
#                           ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                             ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                         ^ source.ocaml
#                                          ^^ source.ocaml keyword.other.ocaml
>  if d.t_len < d.t_need
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^^^^^ source.ocaml
>  then ret decode_utf_16be (malformed_pair true hi d.t 0 d.t_len) bcount d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^^^^ source.ocaml meta.paren-group.ocaml constant.language.boolean.ocaml
#                                               ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml
#                                                                 ^^^^^^^^^^ source.ocaml
>  else ret decode_utf_16be (r_utf_16_lo hi d.t 0 1) bcount d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                   ^^^^^^^^^^ source.ocaml
>
>and t_decode_utf_16be d =                              (* decode from [d.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  if d.t_len < d.t_need
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^^^^^ source.ocaml
>  then ret decode_utf_16be (malformed d.t 0 d.t_len) d.t_len d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                    ^^^^^^^^^^^ source.ocaml
>  else decode_utf_16be_lo (r_utf_16 d.t 0 1) d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^ source.ocaml
>
>and decode_utf_16be_lo v d = match v with
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                            ^ source.ocaml
#                             ^^^^^ source.ocaml keyword.control.ocaml
#                                  ^^^ source.ocaml
#                                     ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar _ | `Malformed _ as v -> ret decode_utf_16be v 2 d
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                        ^ source.ocaml constant.numeric.integer.ocaml
#                                                         ^^^ source.ocaml
>| `Hi hi ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let rem = i_rem d in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^^ source.ocaml keyword.other.ocaml
>    if rem < 2 then (t_need d 2; t_fill (t_decode_utf_16be_lo hi) d) else
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.symbol.ocaml
#            ^ source.ocaml
#             ^ source.ocaml constant.numeric.integer.ocaml
#              ^ source.ocaml
#               ^^^^ source.ocaml keyword.control.ocaml
#                   ^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                 ^^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml
#                                                                     ^^^^ source.ocaml keyword.control.ocaml
>    let j = d.i_pos in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>    d.i_pos <- d.i_pos + 2;
#^^^^^^^^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.symbol.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml
#                         ^ source.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
>    ret decode_utf_16be (r_utf_16_lo hi d.i j (j + 1)) 4 d
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml
#                                                       ^ source.ocaml constant.numeric.integer.ocaml
#                                                        ^^^ source.ocaml
>
>and decode_utf_16be d =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem <= 0 then (if rem < 0 then `End else refill decode_utf_16be d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml keyword.control.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.paren-group.ocaml
#                                                                       ^ source.ocaml
#                                                                        ^^^^ source.ocaml keyword.control.ocaml
>  if rem < 2 then (t_need d 2; t_fill t_decode_utf_16be d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml
#           ^ source.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml
#             ^^^^ source.ocaml keyword.control.ocaml
#                 ^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml
#                                                           ^^^^ source.ocaml keyword.control.ocaml
>  let j = d.i_pos in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^^^^^^^^^ source.ocaml
#                  ^^ source.ocaml keyword.other.ocaml
>  d.i_pos <- d.i_pos + 2; decode_utf_16be_lo (r_utf_16 d.i j (j + 1)) d
#^^^^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.symbol.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^ source.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                              ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                                     ^^^ source.ocaml
>
>(* UTF-16LE decoder, same as UTF-16BE with byte swapped. *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                         ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let rec t_decode_utf_16le_lo hi d =                    (* decode from [d.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                               ^ source.ocaml meta.function.ocaml
#                                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                                 ^ source.ocaml meta.function.ocaml
#                                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                                   ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let bcount = d.t_len + 2 (* hi count *) in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml
#                         ^ source.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml
#                           ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                             ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                         ^ source.ocaml
#                                          ^^ source.ocaml keyword.other.ocaml
>  if d.t_len < d.t_need
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^^^^^ source.ocaml
>  then ret decode_utf_16le (malformed_pair false hi d.t 0 d.t_len) bcount d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^^^^^ source.ocaml meta.paren-group.ocaml constant.language.boolean.ocaml
#                                                ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                         ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml
#                                                                  ^^^^^^^^^^ source.ocaml
>  else ret decode_utf_16le (r_utf_16_lo hi d.t 1 0) bcount d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                   ^^^^^^^^^^ source.ocaml
>
>and t_decode_utf_16le d =                              (* decode from [d.t]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  if d.t_len < d.t_need
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^^^^^ source.ocaml
>  then ret decode_utf_16le (malformed d.t 0 d.t_len) d.t_len d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                    ^^^^^^^^^^^ source.ocaml
>  else decode_utf_16le_lo (r_utf_16 d.t 1 0) d
#^^ source.ocaml
#  ^^^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^ source.ocaml
>
>and decode_utf_16le_lo v d = match v with
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                            ^ source.ocaml
#                             ^^^^^ source.ocaml keyword.control.ocaml
#                                  ^^^ source.ocaml
#                                     ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar _ | `Malformed _ as v -> ret decode_utf_16le v 2 d
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                        ^ source.ocaml constant.numeric.integer.ocaml
#                                                         ^^^ source.ocaml
>| `Hi hi ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let rem = i_rem d in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^^ source.ocaml keyword.other.ocaml
>    if rem < 2 then (t_need d 2; t_fill (t_decode_utf_16le_lo hi) d) else
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.symbol.ocaml
#            ^ source.ocaml
#             ^ source.ocaml constant.numeric.integer.ocaml
#              ^ source.ocaml
#               ^^^^ source.ocaml keyword.control.ocaml
#                   ^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                 ^^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml
#                                                                     ^^^^ source.ocaml keyword.control.ocaml
>    let j = d.i_pos in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>    d.i_pos <- d.i_pos + 2;
#^^^^^^^^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.symbol.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml
#                         ^ source.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
>    ret decode_utf_16le (r_utf_16_lo hi d.i (j + 1) j) 4 d
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^^ source.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml
#                                                       ^ source.ocaml constant.numeric.integer.ocaml
#                                                        ^^^ source.ocaml
>
>and decode_utf_16le d =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let rem = i_rem d in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  if rem <= 0 then (if rem < 0 then `End else refill decode_utf_16le d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml
#            ^ source.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml
#              ^^^^ source.ocaml keyword.control.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                      ^^^^^ source.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.paren-group.ocaml keyword.control.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.paren-group.ocaml
#                                                                       ^ source.ocaml
#                                                                        ^^^^ source.ocaml keyword.control.ocaml
>  if rem < 2 then (t_need d 2; t_fill t_decode_utf_16le d) else
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml
#           ^ source.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml
#             ^^^^ source.ocaml keyword.control.ocaml
#                 ^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml
#                                                           ^^^^ source.ocaml keyword.control.ocaml
>  let j = d.i_pos in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^ source.ocaml
#        ^ source.ocaml keyword.operator.infix.ocaml
#         ^^^^^^^^^ source.ocaml
#                  ^^ source.ocaml keyword.other.ocaml
>  d.i_pos <- d.i_pos + 2; decode_utf_16le_lo (r_utf_16 d.i (j + 1) j) d
#^^^^^^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.symbol.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^ source.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^ source.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                  ^^ source.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                                     ^^^ source.ocaml
>
>(* Encoding guessing. The guess is simple but starting the decoder
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   after is tedious, uutf's decoders are not designed to put bytes
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   back in the stream. *)
#^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let guessed_utf_8 d =                   (* start decoder after `UTF_8 guess. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let b3 d =                                 (* handles the third read byte. *)
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#        ^ source.ocaml meta.function.ocaml
#         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    let b3 = unsafe_byte d.t 2 in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^^^^^^^^^ source.ocaml
#                             ^ source.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml
#                               ^^ source.ocaml keyword.other.ocaml
>    match utf_8_len.(b3) with
#^^^^ source.ocaml
#    ^^^^^ source.ocaml keyword.control.ocaml
#         ^^^^^^^^^^^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml
#                         ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>    | 0 -> ret decode_utf_8 (malformed d.t 2 1) 1 d
#^^^ source.ocaml meta.pattern-match.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml
#                                                ^ source.ocaml constant.numeric.integer.ocaml
#                                                 ^^^ source.ocaml
>    | n ->
#^^^^ source.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>        d.t_need <- n; d.t_len <- 1; unsafe_set_byte d.t 0 b3;
#^^^^^^^^^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^^ source.ocaml
#                     ^ source.ocaml punctuation.separator.ocaml
#                      ^^^^^^^^^ source.ocaml
#                               ^ source.ocaml keyword.operator.symbol.ocaml
#                                ^ source.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml punctuation.separator.ocaml
#                                    ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                         ^ source.ocaml constant.numeric.integer.ocaml
#                                                          ^^^ source.ocaml
#                                                             ^ source.ocaml punctuation.separator.ocaml
>        t_fill t_decode_utf_8 d
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let b2 d =                                     (* handle second read byte. *)
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#        ^ source.ocaml meta.function.ocaml
#         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    let b2 = unsafe_byte d.t 1 in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^^^^^^^^^^^^^^^^^ source.ocaml
#                             ^ source.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml
#                               ^^ source.ocaml keyword.other.ocaml
>    let b3 = if d.t_len > 2 then b3 else decode_utf_8 (* decodes `End *) in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml
#           ^ source.ocaml keyword.operator.infix.ocaml
#            ^ source.ocaml
#             ^^ source.ocaml keyword.control.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml keyword.operator.symbol.ocaml
#                         ^ source.ocaml
#                          ^ source.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml
#                            ^^^^ source.ocaml keyword.control.ocaml
#                                ^^^^ source.ocaml
#                                    ^^^^ source.ocaml keyword.control.ocaml
#                                        ^^^^^^^^^^^^^^ source.ocaml
#                                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                        ^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                                                        ^ source.ocaml
#                                                                         ^^ source.ocaml keyword.other.ocaml
>    match utf_8_len.(b2) with
#^^^^ source.ocaml
#    ^^^^^ source.ocaml keyword.control.ocaml
#         ^^^^^^^^^^^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml
#                         ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>    | 0 -> ret b3 (malformed d.t 1 1) 1 d
#^^^ source.ocaml meta.pattern-match.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#          ^^^^^^^^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml
#                                      ^ source.ocaml constant.numeric.integer.ocaml
#                                       ^^^ source.ocaml
>    | 1 -> ret b3 (r_utf_8 d.t 1 1) 1 d
#^^^^ source.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#          ^^^^^^^^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml
#                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                     ^^^ source.ocaml
>    | n ->                         (* copy d.t.(1-2) to d.t.(0-1) and decode *)
#^^^^ source.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                   ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>        d.t_need <- n;
#^^^^^^^^^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^^ source.ocaml
#                     ^ source.ocaml punctuation.separator.ocaml
>        unsafe_set_byte d.t 0 b2;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^ source.ocaml constant.numeric.integer.ocaml
#                             ^^^ source.ocaml
#                                ^ source.ocaml punctuation.separator.ocaml
>        if (d.t_len < 3) then d.t_len <- 1 else
#^^^^^^^^ source.ocaml
#        ^^ source.ocaml keyword.control.ocaml
#          ^ source.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml
#                         ^^^^ source.ocaml keyword.control.ocaml
#                             ^^^^^^^^^ source.ocaml
#                                      ^ source.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml keyword.operator.infix.ocaml
#                                        ^ source.ocaml
#                                         ^ source.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml
#                                           ^^^^ source.ocaml keyword.control.ocaml
>        (d.t_len <- 2; unsafe_set_byte d.t 1 (unsafe_byte d.t 2); );
#^^^^^^^^ source.ocaml
#        ^ source.ocaml meta.paren-group.ocaml
#         ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                      ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml punctuation.separator.ocaml
>        t_fill t_decode_utf_8 d
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let b1 = unsafe_byte d.t 0 in                   (* handle first read byte. *)
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^^^^^^^^^^^^^^^^^ source.ocaml
#                           ^ source.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml
#                             ^^ source.ocaml keyword.other.ocaml
#                               ^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                  ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let b2 = if d.t_len > 1 then b2 else decode_utf_8 (* decodes `End *) in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.infix.ocaml
#          ^ source.ocaml
#           ^^ source.ocaml keyword.control.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.symbol.ocaml
#                       ^ source.ocaml
#                        ^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^^^ source.ocaml keyword.control.ocaml
#                              ^^^^ source.ocaml
#                                  ^^^^ source.ocaml keyword.control.ocaml
#                                      ^^^^^^^^^^^^^^ source.ocaml
#                                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                      ^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                                                      ^ source.ocaml
#                                                                       ^^ source.ocaml keyword.other.ocaml
>  match utf_8_len.(b1) with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^^^^^^^^^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml
#                      ^ source.ocaml
#                       ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | 0 -> ret b2 (malformed d.t 0 1) 1 d
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#        ^^^^^^^^ source.ocaml
#                ^ source.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml
#                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                     ^^^ source.ocaml
>  | 1 -> ret b2 (r_utf_8 d.t 0 1) 1 d
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#        ^^^^^^^^ source.ocaml
#                ^ source.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                   ^^^ source.ocaml
>  | 2 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      if d.t_len < 2 then ret decode_utf_8 (malformed d.t 0 1) 1 d else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml keyword.control.ocaml
#                         ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml
#                                                              ^ source.ocaml
#                                                               ^ source.ocaml constant.numeric.integer.ocaml
#                                                                ^^^ source.ocaml
#                                                                   ^^^^ source.ocaml keyword.control.ocaml
>      if d.t_len < 3 then ret decode_utf_8 (r_utf_8 d.t 0 2) 2 d else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml keyword.control.ocaml
#                         ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml
#                                                             ^ source.ocaml constant.numeric.integer.ocaml
#                                                              ^^^ source.ocaml
#                                                                 ^^^^ source.ocaml keyword.control.ocaml
>      ret b3 (r_utf_8 d.t 0 2) 2 d
#^^^^^^^^^^^^^ source.ocaml
#             ^ source.ocaml meta.paren-group.ocaml
#              ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml
#                               ^ source.ocaml constant.numeric.integer.ocaml
#                                ^^^ source.ocaml
>  | 3 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      if d.t_len < 3
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
>      then ret decode_utf_8 (malformed d.t 0 d.t_len) d.t_len d
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                     ^^^^^^^^^^^ source.ocaml
>      else ret decode_utf_8 (r_utf_8 d.t 0 3) 3 d
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml
#                                              ^ source.ocaml constant.numeric.integer.ocaml
#                                               ^^^ source.ocaml
>  | 4 ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      if d.t_len < 3
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
>      then ret decode_utf_8 (malformed d.t 0 d.t_len) d.t_len d
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^^^^^^^^^^^^^^^^^^ source.ocaml
#                            ^ source.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                     ^^^^^^^^^^^ source.ocaml
>      else (d.t_need <- 4; t_fill t_decode_utf_8 d)
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^ source.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                     ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                      ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                       ^ source.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
>  | n -> assert false
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#        ^ source.ocaml
#         ^^^^^^ source.ocaml keyword.other.ocaml
#               ^ source.ocaml
#                ^^^^^ source.ocaml constant.language.boolean.ocaml
>
>let guessed_utf_16 d be v =     (* start decoder after `UTF_16{BE,LE} guess. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                           ^^^^^ source.ocaml
#                                ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let decode_utf_16, t_decode_utf_16, t_decode_utf_16_lo, j0, j1 =
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                 ^ source.ocaml keyword.operator.infix.ocaml
>    if be then decode_utf_16be, t_decode_utf_16be, t_decode_utf_16be_lo, 0, 1
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^^ source.ocaml
#          ^^^^ source.ocaml keyword.control.ocaml
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                         ^ source.ocaml constant.numeric.integer.ocaml
#                                                                          ^^ source.ocaml
#                                                                            ^ source.ocaml constant.numeric.integer.ocaml
>    else decode_utf_16le, t_decode_utf_16le, t_decode_utf_16le_lo, 1, 0
#^^^^ source.ocaml
#    ^^^^ source.ocaml keyword.control.ocaml
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                   ^ source.ocaml constant.numeric.integer.ocaml
#                                                                    ^^ source.ocaml
#                                                                      ^ source.ocaml constant.numeric.integer.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let b3 k d =
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#        ^ source.ocaml meta.function.ocaml
#         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>    if d.t_len < 3 then decode_utf_16 d (* decodes `End *) else
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^^^ source.ocaml
#               ^ source.ocaml keyword.operator.symbol.ocaml
#                ^ source.ocaml
#                 ^ source.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml
#                   ^^^^ source.ocaml keyword.control.ocaml
#                       ^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                                          ^ source.ocaml
#                                                           ^^^^ source.ocaml keyword.control.ocaml
>    begin                             (* copy d.t.(2) to d.t.(0) and decode. *)
#^^^^ source.ocaml
#    ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                      ^^ source.ocaml meta.begin-end-group.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.begin-end-group.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>      d.t_need <- 2; d.t_len <- 1;
#^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
#                    ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      unsafe_set_byte d.t 0 (unsafe_byte d.t 2);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      t_fill k d
#^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>    end
#^^^^ source.ocaml meta.begin-end-group.ocaml
#    ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  match v with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^ source.ocaml
#          ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `BOM -> ret (b3 t_decode_utf_16) (`Uchar u_bom) 2 d
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^ source.ocaml
#                ^ source.ocaml meta.paren-group.ocaml
#                 ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml
#                                     ^ source.ocaml meta.paren-group.ocaml
#                                      ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                            ^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml
#                                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                                     ^^^ source.ocaml
>  | `ASCII u -> ret (b3 t_decode_utf_16) (`Uchar u) 2 d
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^^^^^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml
#                                         ^ source.ocaml meta.paren-group.ocaml
#                                          ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                ^^ source.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml
#                                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                                     ^^^ source.ocaml
>  | `Decode ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      match r_utf_16 d.t j0 j1 with
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml keyword.control.ocaml
#           ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                               ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | `Malformed _ | `Uchar _ as v -> ret (b3 t_decode_utf_16) v 2 d
#^^^^^ source.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                    ^ source.ocaml meta.pattern-match.ocaml
#                     ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                      ^ source.ocaml meta.pattern-match.ocaml
#                       ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                               ^ source.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                  ^ source.ocaml meta.pattern-match.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                    ^ source.ocaml meta.pattern-match.ocaml
#                                     ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                       ^^^^^ source.ocaml
#                                            ^ source.ocaml meta.paren-group.ocaml
#                                             ^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.paren-group.ocaml
#                                                                ^^^ source.ocaml
#                                                                   ^ source.ocaml constant.numeric.integer.ocaml
#                                                                    ^^^ source.ocaml
>      | `Hi hi ->
#^^^^^^ source.ocaml
#      ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.pattern-match.ocaml
#        ^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>        if d.t_len < 3
#^^^^^^^^ source.ocaml
#        ^^ source.ocaml keyword.control.ocaml
#          ^^^^^^^^^ source.ocaml
#                   ^ source.ocaml keyword.operator.symbol.ocaml
#                    ^ source.ocaml
#                     ^ source.ocaml constant.numeric.integer.ocaml
>        then ret decode_utf_16 (malformed_pair be hi "" 0 0) d.t_len d
#^^^^^^^^ source.ocaml
#        ^^^^ source.ocaml keyword.control.ocaml
#            ^^^^^^^^^^^^^^^^^^^ source.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml
#                                ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.paren-group.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                                                      ^ source.ocaml meta.paren-group.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                                                       ^ source.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml
#                                                            ^^^^^^^^^^^ source.ocaml
>        else (b3 (t_decode_utf_16_lo hi)) d
#^^^^^^^^ source.ocaml
#        ^^^^ source.ocaml keyword.control.ocaml
#            ^ source.ocaml
#             ^ source.ocaml meta.paren-group.ocaml
#              ^^^ source.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.paren-group.ocaml
#                                         ^^^ source.ocaml
>
>let guess_encoding d =                  (* guess encoding and start decoder. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                        ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let setup d = match r_encoding d.t 0 d.t_len with
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#               ^ source.ocaml
#                ^^^^^ source.ocaml keyword.control.ocaml
#                     ^^^^^^^^^^^^^^^^ source.ocaml
#                                     ^ source.ocaml constant.numeric.integer.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `UTF_8 r ->
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      d.encoding <- `UTF_8; d.k <- decode_utf_8;
#^^^^^^^^^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml
#                    ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
#                           ^^^^^ source.ocaml
#                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                 ^ source.ocaml keyword.operator.infix.ocaml
#                                  ^^^^^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml punctuation.separator.ocaml
>      begin match r with
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#           ^ source.ocaml meta.begin-end-group.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                 ^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | `BOM -> ret decode_utf_8 (`Uchar u_bom) 3 d
#^^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                  ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                        ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                                                 ^^^ source.ocaml meta.begin-end-group.ocaml
>      | `Decode -> guessed_utf_8 d
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                  ^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      | `End -> `End
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.begin-end-group.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml
#                ^^^^ source.ocaml meta.begin-end-group.ocaml entity.name.type.variant.polymorphic.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>  | `UTF_16BE r ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      d.encoding <- `UTF_16BE; d.k <- decode_utf_16be; guessed_utf_16 d true r
#^^^^^^^^^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml
#                    ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml punctuation.separator.ocaml
#                              ^^^^^ source.ocaml
#                                   ^ source.ocaml keyword.operator.symbol.ocaml
#                                    ^ source.ocaml keyword.operator.infix.ocaml
#                                     ^^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^ source.ocaml punctuation.separator.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                        ^^^^ source.ocaml constant.language.boolean.ocaml
#                                                                            ^^^ source.ocaml
>  | `UTF_16LE r ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      d.encoding <- `UTF_16LE; d.k <- decode_utf_16le; guessed_utf_16 d false r
#^^^^^^^^^^^^^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml
#                    ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml punctuation.separator.ocaml
#                              ^^^^^ source.ocaml
#                                   ^ source.ocaml keyword.operator.symbol.ocaml
#                                    ^ source.ocaml keyword.operator.infix.ocaml
#                                     ^^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^ source.ocaml punctuation.separator.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                        ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                                                             ^^^ source.ocaml
>
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  (t_need d 3; t_fill setup d)
#^^ source.ocaml
#  ^ source.ocaml meta.paren-group.ocaml
#   ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#            ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#              ^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.paren-group.ocaml
>
>(* Character post-processors. Used for BOM handling, newline
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   normalization and position tracking. The [pp_remove_bom] is only
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   used for the first character to remove a possible initial BOM and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   handle UTF-16 endianness recognition. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                         ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let nline d = d.col <- 0; d.line <- d.line + 1                   (* inlined. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#             ^^^^^^^ source.ocaml
#                    ^ source.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^ source.ocaml
#                       ^ source.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^ source.ocaml
#                                 ^ source.ocaml keyword.operator.symbol.ocaml
#                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                   ^^^^^^^^ source.ocaml
#                                           ^ source.ocaml keyword.operator.infix.ocaml
#                                            ^ source.ocaml
#                                             ^ source.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let ncol d = d.col <- d.col + 1                                  (* inlined. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#        ^ source.ocaml meta.function.ocaml
#         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#            ^^^^^^^ source.ocaml
#                   ^ source.ocaml keyword.operator.symbol.ocaml
#                    ^ source.ocaml keyword.operator.infix.ocaml
#                     ^^^^^^^ source.ocaml
#                            ^ source.ocaml keyword.operator.infix.ocaml
#                             ^ source.ocaml
#                              ^ source.ocaml constant.numeric.integer.ocaml
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let ncount d = d.count <- d.count + 1                            (* inlined. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.symbol.ocaml
#                        ^ source.ocaml keyword.operator.infix.ocaml
#                         ^^^^^^^^^ source.ocaml
#                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                   ^ source.ocaml
#                                    ^ source.ocaml constant.numeric.integer.ocaml
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let cr d b = d.last_cr <- b                                      (* inlined. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#      ^ source.ocaml meta.function.ocaml
#       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#        ^ source.ocaml meta.function.ocaml
#         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#            ^^^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.symbol.ocaml
#                        ^ source.ocaml keyword.operator.infix.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                 ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let pp_remove_bom utf16 pp d = function(* removes init. BOM, handles UTF-16. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^^^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                              ^^^^^^^^^ source.ocaml
#                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>| `Uchar 0xFEFF (* BOM *) ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                       ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    if utf16 then (d.encoding <- `UTF_16BE; d.k <- decode_utf_16be);
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^^^^^ source.ocaml
#             ^^^^ source.ocaml keyword.control.ocaml
#                 ^ source.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                ^ source.ocaml meta.paren-group.ocaml
#                                 ^^^^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                          ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                           ^^^^^ source.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml punctuation.separator.ocaml
>    d.removed_bom <- true; d.pp <- pp; d.k d
#^^^^^^^^^^^^^^^^^^ source.ocaml
#                  ^ source.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml constant.language.boolean.ocaml
#                         ^ source.ocaml punctuation.separator.ocaml
#                          ^^^^^^ source.ocaml
#                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                 ^ source.ocaml keyword.operator.infix.ocaml
#                                  ^^^ source.ocaml
#                                     ^ source.ocaml punctuation.separator.ocaml
#                                      ^^^^^^^ source.ocaml
>| `Uchar 0xFFFE (* BOM reversed from decode_utf_16be *) when utf16 ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                                                     ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                                                       ^ source.ocaml meta.pattern-match.ocaml
#                                                        ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-condition.ocaml
#                                                            ^^^^^^^ source.ocaml
#                                                                   ^^ source.ocaml punctuation.separator.function-return.ocaml
>    d.encoding <- `UTF_16LE; d.k <- decode_utf_16le;
#^^^^^^^^^^^^^^^ source.ocaml
#               ^ source.ocaml keyword.operator.symbol.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml
#                  ^^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                           ^ source.ocaml punctuation.separator.ocaml
#                            ^^^^^ source.ocaml
#                                 ^ source.ocaml keyword.operator.symbol.ocaml
#                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                   ^^^^^^^^^^^^^^^^ source.ocaml
#                                                   ^ source.ocaml punctuation.separator.ocaml
>    d.removed_bom <- true; d.pp <- pp; d.k d
#^^^^^^^^^^^^^^^^^^ source.ocaml
#                  ^ source.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml constant.language.boolean.ocaml
#                         ^ source.ocaml punctuation.separator.ocaml
#                          ^^^^^^ source.ocaml
#                                ^ source.ocaml keyword.operator.symbol.ocaml
#                                 ^ source.ocaml keyword.operator.infix.ocaml
#                                  ^^^ source.ocaml
#                                     ^ source.ocaml punctuation.separator.ocaml
#                                      ^^^^^^^ source.ocaml
>| `Malformed _ | `Uchar _ as v ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml
#                 ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    d.removed_bom <- false; d.pp <- pp; d.pp d v
#^^^^^^^^^^^^^^^^^^ source.ocaml
#                  ^ source.ocaml keyword.operator.symbol.ocaml
#                   ^ source.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml
#                     ^^^^^ source.ocaml constant.language.boolean.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
#                           ^^^^^^ source.ocaml
#                                 ^ source.ocaml keyword.operator.symbol.ocaml
#                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                   ^^^ source.ocaml
#                                      ^ source.ocaml punctuation.separator.ocaml
#                                       ^^^^^^^^^^ source.ocaml
>
>let pp_nln_none d = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^ source.ocaml
#                    ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar 0x000A (* LF *) as v ->
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml
#                              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let last_cr = d.last_cr in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>    cr d false; ncount d; if last_cr then v else (nline d; v)
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^ source.ocaml
#                          ^^ source.ocaml keyword.control.ocaml
#                            ^^^^^^^^^ source.ocaml
#                                     ^^^^ source.ocaml keyword.control.ocaml
#                                         ^^^ source.ocaml
#                                            ^^^^ source.ocaml keyword.control.ocaml
#                                                ^ source.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml
#                                                  ^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                          ^^ source.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml
>| `Uchar 0x000D (* CR *) as v -> cr d true; ncount d; nline d; v
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml
#                              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                ^^^^^^ source.ocaml
#                                      ^^^^ source.ocaml constant.language.boolean.ocaml
#                                          ^ source.ocaml punctuation.separator.ocaml
#                                           ^^^^^^^^^ source.ocaml
#                                                    ^ source.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^ source.ocaml
#                                                             ^ source.ocaml punctuation.separator.ocaml
#                                                              ^^^ source.ocaml
>| `Uchar (0x0085 | 0x000C | 0x2028 | 0x2029) (* NEL | FF | LS | PS *) as v ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#          ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                   ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                            ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                     ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                            ^ source.ocaml meta.pattern-match.ocaml
#                                             ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                ^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                      ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                        ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                           ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                             ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                                                     ^ source.ocaml meta.pattern-match.ocaml
#                                                                      ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                                                        ^ source.ocaml meta.pattern-match.ocaml
#                                                                         ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                                                          ^ source.ocaml meta.pattern-match.ocaml
#                                                                           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    cr d false; ncount d; nline d; v
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^ source.ocaml
#                                 ^ source.ocaml punctuation.separator.ocaml
#                                  ^^^ source.ocaml
>| `Uchar _ | `Malformed _ as v -> cr d false; ncount d; ncol d; v
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^ source.ocaml
#                                       ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                            ^ source.ocaml punctuation.separator.ocaml
#                                             ^^^^^^^^^ source.ocaml
#                                                      ^ source.ocaml punctuation.separator.ocaml
#                                                       ^^^^^^^ source.ocaml
#                                                              ^ source.ocaml punctuation.separator.ocaml
#                                                               ^^^ source.ocaml
>
>let pp_nln_readline d = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.function.ocaml
#                      ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                       ^ source.ocaml
#                        ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar 0x000A (* LF *) ->
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let last_cr = d.last_cr in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>    cr d false; if last_cr then d.k d else (ncount d; nline d; `Uchar d.nl)
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^ source.ocaml
#                ^^ source.ocaml keyword.control.ocaml
#                  ^^^^^^^^^ source.ocaml
#                           ^^^^ source.ocaml keyword.control.ocaml
#                               ^^^^^^^ source.ocaml
#                                      ^^^^ source.ocaml keyword.control.ocaml
#                                          ^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml
#                                                               ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                     ^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>| `Uchar 0x000D (* CR *) -> cr d true; ncount d; nline d; `Uchar d.nl
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                           ^^^^^^ source.ocaml
#                                 ^^^^ source.ocaml constant.language.boolean.ocaml
#                                     ^ source.ocaml punctuation.separator.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml punctuation.separator.ocaml
#                                                ^^^^^^^^ source.ocaml
#                                                        ^ source.ocaml punctuation.separator.ocaml
#                                                         ^ source.ocaml
#                                                          ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^^^^^^ source.ocaml
>| `Uchar (0x0085 | 0x000C | 0x2028 | 0x2029) (* NEL | FF | LS | PS *) ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#          ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                   ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                            ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                     ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                            ^ source.ocaml meta.pattern-match.ocaml
#                                             ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                ^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                      ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                        ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                           ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                             ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                                                     ^ source.ocaml meta.pattern-match.ocaml
#                                                                      ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    cr d false; ncount d; nline d; `Uchar d.nl
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^ source.ocaml
#                                 ^ source.ocaml punctuation.separator.ocaml
#                                  ^ source.ocaml
#                                   ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                         ^^^^^^ source.ocaml
>| `Uchar _ | `Malformed _ as v -> cr d false; ncount d; ncol d; v
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^ source.ocaml
#                                       ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                            ^ source.ocaml punctuation.separator.ocaml
#                                             ^^^^^^^^^ source.ocaml
#                                                      ^ source.ocaml punctuation.separator.ocaml
#                                                       ^^^^^^^ source.ocaml
#                                                              ^ source.ocaml punctuation.separator.ocaml
#                                                               ^^^ source.ocaml
>
>let pp_nln_nlf d = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                  ^ source.ocaml
#                   ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar 0x000A (* LF *) ->
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let last_cr = d.last_cr in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>    cr d false; if last_cr then d.k d else (ncount d; nline d; `Uchar d.nl)
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^ source.ocaml
#                ^^ source.ocaml keyword.control.ocaml
#                  ^^^^^^^^^ source.ocaml
#                           ^^^^ source.ocaml keyword.control.ocaml
#                               ^^^^^^^ source.ocaml
#                                      ^^^^ source.ocaml keyword.control.ocaml
#                                          ^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml
#                                                               ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                     ^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>| `Uchar 0x000D (* CR *) -> cr d true; ncount d; nline d; `Uchar d.nl
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                           ^^^^^^ source.ocaml
#                                 ^^^^ source.ocaml constant.language.boolean.ocaml
#                                     ^ source.ocaml punctuation.separator.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml punctuation.separator.ocaml
#                                                ^^^^^^^^ source.ocaml
#                                                        ^ source.ocaml punctuation.separator.ocaml
#                                                         ^ source.ocaml
#                                                          ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^^^^^^ source.ocaml
>| `Uchar 0x0085 (* NEL *) -> cr d false; ncount d; nline d; `Uchar d.nl
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                       ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                            ^^^^^^ source.ocaml
#                                  ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                       ^ source.ocaml punctuation.separator.ocaml
#                                        ^^^^^^^^^ source.ocaml
#                                                 ^ source.ocaml punctuation.separator.ocaml
#                                                  ^^^^^^^^ source.ocaml
#                                                          ^ source.ocaml punctuation.separator.ocaml
#                                                           ^ source.ocaml
#                                                            ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                  ^^^^^^ source.ocaml
>| `Uchar (0x000C | 0x2028 | 0x2029) as v (* FF | LS | PS *) ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#          ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                   ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                            ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml
#                                    ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                      ^ source.ocaml meta.pattern-match.ocaml
#                                       ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                        ^ source.ocaml meta.pattern-match.ocaml
#                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                            ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                 ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                     ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                      ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                        ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                                           ^ source.ocaml meta.pattern-match.ocaml
#                                                            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    cr d false; ncount d; nline d; v
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^ source.ocaml
#                                 ^ source.ocaml punctuation.separator.ocaml
#                                  ^^^ source.ocaml
>| `Uchar _ | `Malformed _ as v -> cr d false; ncount d; ncol d; v
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^ source.ocaml
#                                       ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                            ^ source.ocaml punctuation.separator.ocaml
#                                             ^^^^^^^^^ source.ocaml
#                                                      ^ source.ocaml punctuation.separator.ocaml
#                                                       ^^^^^^^ source.ocaml
#                                                              ^ source.ocaml punctuation.separator.ocaml
#                                                               ^^^ source.ocaml
>
>let pp_nln_ascii d = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^ source.ocaml
#                     ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `Uchar 0x000A (* LF *) ->
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let last_cr = d.last_cr in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^^^ source.ocaml
#                            ^^ source.ocaml keyword.other.ocaml
>    cr d false; if last_cr then d.k d else (ncount d; nline d; `Uchar d.nl)
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^ source.ocaml
#                ^^ source.ocaml keyword.control.ocaml
#                  ^^^^^^^^^ source.ocaml
#                           ^^^^ source.ocaml keyword.control.ocaml
#                               ^^^^^^^ source.ocaml
#                                      ^^^^ source.ocaml keyword.control.ocaml
#                                          ^ source.ocaml
#                                           ^ source.ocaml meta.paren-group.ocaml
#                                            ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                              ^ source.ocaml meta.paren-group.ocaml
#                                                               ^^^^^^ source.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                     ^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                          ^ source.ocaml meta.paren-group.ocaml
>| `Uchar 0x000D (* CR *) -> cr d true; ncount d; nline d; `Uchar d.nl
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^^^^^ source.ocaml meta.pattern-match.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                  ^^^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml
#                      ^^ source.ocaml meta.pattern-match.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml
#                         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                           ^^^^^^ source.ocaml
#                                 ^^^^ source.ocaml constant.language.boolean.ocaml
#                                     ^ source.ocaml punctuation.separator.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml punctuation.separator.ocaml
#                                                ^^^^^^^^ source.ocaml
#                                                        ^ source.ocaml punctuation.separator.ocaml
#                                                         ^ source.ocaml
#                                                          ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                ^^^^^^ source.ocaml
>| `Uchar (0x0085 | 0x000C | 0x2028 | 0x2029) as v (* NEL | FF | LS | PS *) ->
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#          ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                   ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                            ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                     ^^^^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                            ^ source.ocaml meta.pattern-match.ocaml
#                                             ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                               ^ source.ocaml meta.pattern-match.ocaml
#                                                ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                                 ^ source.ocaml meta.pattern-match.ocaml
#                                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                     ^^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                        ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                          ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                           ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                             ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                              ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                               ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                                  ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                   ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.separator.match-option.ocaml
#                                                                    ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                     ^^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml entity.name.type.variant.ocaml
#                                                                       ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml
#                                                                        ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml keyword.operator.infix.ocaml
#                                                                         ^ source.ocaml meta.pattern-match.ocaml meta.match-option.ocaml punctuation.definition.match-option.ocaml
#                                                                          ^ source.ocaml meta.pattern-match.ocaml
#                                                                           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    cr d false; ncount d; nline d; v
#^^^^^^^^^ source.ocaml
#         ^^^^^ source.ocaml constant.language.boolean.ocaml
#              ^ source.ocaml punctuation.separator.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^ source.ocaml
#                                 ^ source.ocaml punctuation.separator.ocaml
#                                  ^^^ source.ocaml
>| `Uchar _ | `Malformed _ as v -> cr d false; ncount d; ncol d; v
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                         ^ source.ocaml meta.pattern-match.ocaml
#                          ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.pattern-match.ocaml
#                             ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.pattern-match.ocaml
#                               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                 ^^^^^^ source.ocaml
#                                       ^^^^^ source.ocaml constant.language.boolean.ocaml
#                                            ^ source.ocaml punctuation.separator.ocaml
#                                             ^^^^^^^^^ source.ocaml
#                                                      ^ source.ocaml punctuation.separator.ocaml
#                                                       ^^^^^^^ source.ocaml
#                                                              ^ source.ocaml punctuation.separator.ocaml
#                                                               ^^^ source.ocaml
>
>let decode_fun = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml
#                 ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `UTF_8 -> decode_utf_8
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^^^^ source.ocaml
>| `UTF_16 -> decode_utf_16be                         (* see [pp_remove_bom]. *)
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                       ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>| `UTF_16BE -> decode_utf_16be
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
>| `UTF_16LE -> decode_utf_16le
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
>| `US_ASCII -> decode_us_ascii
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
>| `ISO_8859_1 -> decode_iso_8859_1
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^^^^^^^^^^^^^ source.ocaml
>
>let decoder ?nln ?encoding src =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.optional.ocaml punctuation.definition.optional-parameter.ocaml
#             ^^^ source.ocaml meta.function.ocaml variable.parameter.optional.ocaml entity.name.tag.label.optional.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.optional.ocaml punctuation.definition.optional-parameter.ocaml
#                  ^^^^^^^^ source.ocaml meta.function.ocaml variable.parameter.optional.ocaml entity.name.tag.label.optional.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                              ^ source.ocaml meta.function.ocaml
#                               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let pp, nl = match nln with
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml
#               ^^^^^ source.ocaml keyword.control.ocaml
#                    ^^^^^ source.ocaml
#                         ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | None -> pp_nln_none, 0x000A (* not used. *)
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^^^^ source.ocaml
#                         ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml
#                                ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                  ^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  | Some (`ASCII nl) -> pp_nln_ascii, nl
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#          ^^^^^^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                 ^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.pattern-match.ocaml
#                     ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                       ^^^^^^^^^^^^^^^^^^ source.ocaml
>  | Some (`NLF nl) -> pp_nln_nlf, nl
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#          ^^^^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#               ^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.pattern-match.ocaml
#                   ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                     ^^^^^^^^^^^^^^^^ source.ocaml
>  | Some (`Readline nl) -> pp_nln_readline, nl
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#          ^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                    ^^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.pattern-match.ocaml meta.paren-group.ocaml
#                       ^ source.ocaml meta.pattern-match.ocaml
#                        ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^ source.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let encoding, k = match encoding with
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^^^^^^ source.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^ source.ocaml
#                    ^^^^^ source.ocaml keyword.control.ocaml
#                         ^^^^^^^^^^ source.ocaml
#                                   ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | None -> `UTF_8, guess_encoding
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^ source.ocaml
#            ^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                  ^^^^^^^^^^^^^^^^^ source.ocaml
>  | Some e -> (e :> decoder_encoding), decode_fun e
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^ source.ocaml
#              ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#               ^^ source.ocaml meta.type-constraint.ocaml
#                 ^^ source.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                   ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                                    ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                     ^^^^^^^^^^^^^^^ source.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let i, i_pos, i_max = match src with
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.infix.ocaml
#                       ^ source.ocaml
#                        ^^^^^ source.ocaml keyword.control.ocaml
#                             ^^^^^ source.ocaml
#                                  ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `Manual -> "", 1, 0                            (* implies src_rem d = 0. *)
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^ source.ocaml
#               ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                 ^^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
#                    ^^ source.ocaml
#                      ^ source.ocaml constant.numeric.integer.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                   ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  | `Channel _ -> String.create io_buffer_size, 1, 0                (* idem. *)
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                 ^ source.ocaml
#                  ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                ^ source.ocaml constant.numeric.integer.ocaml
#                                                 ^^ source.ocaml
#                                                   ^ source.ocaml constant.numeric.integer.ocaml
#                                                    ^^^^^^^^^^^^^^^^ source.ocaml
#                                                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                      ^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  | `String s -> s, 0, String.length s - 1
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^ source.ocaml
#                    ^ source.ocaml constant.numeric.integer.ocaml
#                     ^^ source.ocaml
#                       ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                              ^^^^^^^^^ source.ocaml
#                                       ^ source.ocaml keyword.operator.infix.ocaml
#                                        ^ source.ocaml
#                                         ^ source.ocaml constant.numeric.integer.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  { src = (src :> src); encoding; nln = (nln :> nln option); nl;
#^^ source.ocaml
#  ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#   ^^^^^ source.ocaml meta.record.ocaml
#        ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#         ^ source.ocaml meta.record.ocaml
#          ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#           ^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml
#               ^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                 ^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                     ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                      ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                       ^^^^^^^^^ source.ocaml meta.record.ocaml
#                                ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                 ^^^^^ source.ocaml meta.record.ocaml
#                                      ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                       ^ source.ocaml meta.record.ocaml
#                                        ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                         ^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml
#                                             ^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                                               ^^^^^^^^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                                                          ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                                           ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                            ^^^ source.ocaml meta.record.ocaml
#                                                               ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
>    i; i_pos; i_max; t = String.create 4; t_len = 0; t_need = 0;
#^^^^^ source.ocaml meta.record.ocaml
#     ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#      ^^^^^^ source.ocaml meta.record.ocaml
#            ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#             ^^^^^^ source.ocaml meta.record.ocaml
#                   ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                    ^^^ source.ocaml meta.record.ocaml
#                       ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                        ^ source.ocaml meta.record.ocaml
#                         ^^^^^^^ source.ocaml meta.record.ocaml meta.module-reference.ocaml
#                                ^^^^^^^ source.ocaml meta.record.ocaml
#                                       ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                        ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                         ^^^^^^^ source.ocaml meta.record.ocaml
#                                                ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                                 ^ source.ocaml meta.record.ocaml
#                                                  ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                                   ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                    ^^^^^^^^ source.ocaml meta.record.ocaml
#                                                            ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                                             ^ source.ocaml meta.record.ocaml
#                                                              ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                                               ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
>    removed_bom = false; last_cr = false; line = 1; col = 0;
#^^^^^^^^^^^^^^^^ source.ocaml meta.record.ocaml
#                ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                 ^ source.ocaml meta.record.ocaml
#                  ^^^^^ source.ocaml meta.record.ocaml constant.language.boolean.ocaml
#                       ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                        ^^^^^^^^^ source.ocaml meta.record.ocaml
#                                 ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                  ^ source.ocaml meta.record.ocaml
#                                   ^^^^^ source.ocaml meta.record.ocaml constant.language.boolean.ocaml
#                                        ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                         ^^^^^^ source.ocaml meta.record.ocaml
#                                               ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                                ^ source.ocaml meta.record.ocaml
#                                                 ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                   ^^^^^ source.ocaml meta.record.ocaml
#                                                        ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                                         ^ source.ocaml meta.record.ocaml
#                                                          ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                                           ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
>    byte_count = 0; count = 0;
#^^^^^^^^^^^^^^^ source.ocaml meta.record.ocaml
#               ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.record.ocaml
#                 ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                   ^^^^^^^ source.ocaml meta.record.ocaml
#                          ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                           ^ source.ocaml meta.record.ocaml
#                            ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
>    pp = pp_remove_bom (encoding = `UTF_16) pp; k }
#^^^^^^^ source.ocaml meta.record.ocaml
#       ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#        ^^^^^^^^^^^^^^^ source.ocaml meta.record.ocaml
#                       ^ source.ocaml meta.record.ocaml meta.paren-group.ocaml
#                        ^^^^^^^^^ source.ocaml meta.record.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.record.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                  ^ source.ocaml meta.record.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^ source.ocaml meta.record.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                          ^ source.ocaml meta.record.ocaml meta.paren-group.ocaml
#                                           ^^^ source.ocaml meta.record.ocaml
#                                              ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                               ^^^ source.ocaml meta.record.ocaml
#                                                  ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
>
>let decode d = d.k d
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#              ^^^^^^^ source.ocaml
>let decoder_line d = d.line
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                    ^^^^^^^^ source.ocaml
>let decoder_col d = d.col
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^ source.ocaml
>let decoder_byte_count d = d.byte_count
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                          ^^^^^^^^^^^^^^ source.ocaml
>let decoder_count d = d.count
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^^^^^^^^^ source.ocaml
>let decoder_removed_bom d = d.removed_bom
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                           ^^^^^^^^^^^^^^^ source.ocaml
>let decoder_src d = d.src
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^ source.ocaml
>let decoder_nln d = d.nln
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^ source.ocaml
>let decoder_encoding d = d.encoding
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^ source.ocaml
>let set_decoder_encoding d e =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  d.encoding <- (e :> decoder_encoding); d.k <- decode_fun e
#^^^^^^^^^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml
#                ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                 ^^ source.ocaml meta.type-constraint.ocaml
#                   ^^ source.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                     ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                                      ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                       ^ source.ocaml punctuation.separator.ocaml
#                                        ^^^^^ source.ocaml
#                                             ^ source.ocaml keyword.operator.symbol.ocaml
#                                              ^ source.ocaml keyword.operator.infix.ocaml
#                                               ^^^^^^^^^^^^^^ source.ocaml
>
>(* Encode *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^ source.ocaml comment.block.ocaml
#          ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>type dst = [ `Channel of out_channel | `Buffer of Buffer.t | `Manual ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#             ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                      ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                         ^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                       ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                               ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                  ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml meta.module.type.ocaml support.other.module.ocaml
#                                                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml meta.module.type.ocaml storage.type.module.ocaml
#                                                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                             ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                                                    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                                     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>type encode = [ `Await | `End | `Uchar of uchar ]
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                         ^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                       ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                          ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
>type encoder =
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#     ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
>  { dst : dst;                                        (* output destination. *)
#^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#        ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#         ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#          ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                      ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                        ^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    encoding : encoding;                                (* encoded encoding. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#               ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                          ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable o : string;                             (* current output chunk. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#               ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable o_pos : int;                   (* next output position to write. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                           ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable o_max : int;                (* maximal output position to write. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    t : string;                 (* four bytes buffer for overlapping writes. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#     ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#      ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#        ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#               ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable t_pos : int;                    (* next position to read in [t]. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                            ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable t_max : int;                 (* maximal position to read in [t]. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#                   ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                    ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#                                         ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    mutable k :                                     (* encoder continuation. *)
#^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml
#    ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml keyword.other.storage.modifier.ocaml
#            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml source.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.definition.record.ocaml
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                                                    ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>      encoder -> encode -> [ `Ok | `Partial ] }
#^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#      ^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#              ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.separator.function-return.ocaml
#                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                 ^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml storage.type.ocaml
#                       ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                        ^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml punctuation.separator.function-return.ocaml
#                          ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                             ^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                 ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                  ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                   ^^^^^^^^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                           ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                            ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                                             ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml meta.record.definition.ocaml
#                                              ^ source.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.record.ocaml punctuation.definition.record.ocaml
>
>(* On encodes that overlap two (or more) [e.o] buffers, we encode the
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   character to the temporary buffer [o.t] and continue with
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   [tmp_flush] to write this data on the different [e.o] buffers. If
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   the [e.o] buffers are not too small this is faster than
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   continuation based byte per byte writes. *)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                            ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let o_rem e = e.o_max - e.o_pos + 1    (* remaining bytes to write in [e.o]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.infix.ocaml
#                       ^^^^^^^^^ source.ocaml
#                                ^ source.ocaml keyword.operator.infix.ocaml
#                                 ^ source.ocaml
#                                  ^ source.ocaml constant.numeric.integer.ocaml
#                                   ^^^^ source.ocaml
#                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let dst e s j l =                                     (* set [e.o] with [s]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                        ^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  if (j < 0 || l < 0 || j + l > String.length s) then invalid_bounds j l;
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^ source.ocaml
#     ^ source.ocaml meta.paren-group.ocaml
#      ^^ source.ocaml meta.paren-group.ocaml
#        ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#         ^ source.ocaml meta.paren-group.ocaml
#          ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#           ^ source.ocaml meta.paren-group.ocaml
#            ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#              ^^^ source.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.paren-group.ocaml
#                   ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                       ^^^ source.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                           ^^^ source.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml
#                                ^^^^^^^ source.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                       ^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml
#                                                 ^^^^ source.ocaml keyword.control.ocaml
#                                                     ^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                        ^ source.ocaml punctuation.separator.ocaml
>  e.o <- s; e.o_pos <- j; e.o_max <- j + l - 1
#^^^^^^ source.ocaml
#      ^ source.ocaml keyword.operator.symbol.ocaml
#       ^ source.ocaml keyword.operator.infix.ocaml
#        ^^ source.ocaml
#          ^ source.ocaml punctuation.separator.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^ source.ocaml keyword.operator.symbol.ocaml
#                     ^ source.ocaml keyword.operator.infix.ocaml
#                      ^^ source.ocaml
#                        ^ source.ocaml punctuation.separator.ocaml
#                         ^^^^^^^^^ source.ocaml
#                                  ^ source.ocaml keyword.operator.symbol.ocaml
#                                   ^ source.ocaml keyword.operator.infix.ocaml
#                                    ^^^ source.ocaml
#                                       ^ source.ocaml keyword.operator.infix.ocaml
#                                        ^^^ source.ocaml
#                                           ^ source.ocaml keyword.operator.infix.ocaml
#                                            ^ source.ocaml
#                                             ^ source.ocaml constant.numeric.integer.ocaml
>
>let partial k e = function `Await -> k e | `Uchar _ | `End -> invalid_encode ()
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                 ^ source.ocaml
#                  ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.other.function-definition.ocaml
#                                                             ^^^^^^^^^^^^^^^^ source.ocaml
#                                                                             ^ source.ocaml constant.language.pseudo-variable.ocaml
#                                                                              ^ source.ocaml constant.language.pseudo-variable.ocaml meta.empty-typing-pair.parens.ocaml
>let flush k e = match e.dst with(* get free storage in [d.o] and [k]ontinue. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#               ^ source.ocaml
#                ^^^^^ source.ocaml keyword.control.ocaml
#                     ^^^^^^^ source.ocaml
#                            ^^^^ source.ocaml keyword.control.ocaml
#                                ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>| `Manual -> e.k <- partial k; `Partial
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^^^^^ source.ocaml
#                 ^ source.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml keyword.operator.infix.ocaml
#                   ^^^^^^^^^^ source.ocaml
#                             ^ source.ocaml punctuation.separator.ocaml
#                              ^ source.ocaml
#                               ^^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
>| `Buffer b -> Buffer.add_substring b e.o 0 e.o_pos; e.o_pos <- 0; k e
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^ source.ocaml
#               ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                      ^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                          ^ source.ocaml constant.numeric.integer.ocaml
#                                           ^^^^^^^^ source.ocaml
#                                                   ^ source.ocaml punctuation.separator.ocaml
#                                                    ^^^^^^^^^ source.ocaml
#                                                             ^ source.ocaml keyword.operator.symbol.ocaml
#                                                              ^ source.ocaml keyword.operator.infix.ocaml
#                                                               ^ source.ocaml
#                                                                ^ source.ocaml constant.numeric.integer.ocaml
#                                                                 ^ source.ocaml punctuation.separator.ocaml
#                                                                  ^^^^^ source.ocaml
>| `Channel oc -> output oc e.o 0 e.o_pos; e.o_pos <- 0; k e
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml
#              ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                ^^^^^^^^^^^^^^^ source.ocaml
#                               ^ source.ocaml constant.numeric.integer.ocaml
#                                ^^^^^^^^ source.ocaml
#                                        ^ source.ocaml punctuation.separator.ocaml
#                                         ^^^^^^^^^ source.ocaml
#                                                  ^ source.ocaml keyword.operator.symbol.ocaml
#                                                   ^ source.ocaml keyword.operator.infix.ocaml
#                                                    ^ source.ocaml
#                                                     ^ source.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml punctuation.separator.ocaml
#                                                       ^^^^^ source.ocaml
>
>let t_range e max = e.t_pos <- 0; e.t_max <- max
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#             ^ source.ocaml meta.function.ocaml
#              ^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^^^ source.ocaml
#                            ^ source.ocaml keyword.operator.symbol.ocaml
#                             ^ source.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml
#                               ^ source.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml punctuation.separator.ocaml
#                                 ^^^^^^^^^ source.ocaml
#                                          ^ source.ocaml keyword.operator.symbol.ocaml
#                                           ^ source.ocaml keyword.operator.infix.ocaml
#                                            ^^^^^ source.ocaml
>let rec t_flush k e =               (* flush [d.t] up to [d.t_max] in [d.i]. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                     ^^^^^^^^^^^^^^^ source.ocaml
#                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let blit e l =
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>    unsafe_blit e.t e.t_pos e.o e.o_pos l;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                         ^ source.ocaml punctuation.separator.ocaml
>    e.o_pos <- e.o_pos + l; e.t_pos <- e.t_pos + l
#^^^^^^^^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.symbol.ocaml
#             ^ source.ocaml keyword.operator.infix.ocaml
#              ^^^^^^^^^ source.ocaml
#                       ^ source.ocaml keyword.operator.infix.ocaml
#                        ^^ source.ocaml
#                          ^ source.ocaml punctuation.separator.ocaml
#                           ^^^^^^^^^ source.ocaml
#                                    ^ source.ocaml keyword.operator.symbol.ocaml
#                                     ^ source.ocaml keyword.operator.infix.ocaml
#                                      ^^^^^^^^^ source.ocaml
#                                               ^ source.ocaml keyword.operator.infix.ocaml
#                                                ^^^ source.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  let rem = o_rem e in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^^ source.ocaml keyword.other.ocaml
>  let len = e.t_max - e.t_pos + 1 in
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml
#          ^ source.ocaml keyword.operator.infix.ocaml
#           ^^^^^^^^^ source.ocaml
#                    ^ source.ocaml keyword.operator.infix.ocaml
#                     ^^^^^^^^^ source.ocaml
#                              ^ source.ocaml keyword.operator.infix.ocaml
#                               ^ source.ocaml
#                                ^ source.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml
#                                  ^^ source.ocaml keyword.other.ocaml
>  if rem < len then (blit e rem; flush (t_flush k) e) else (blit e len; k e)
#^^ source.ocaml
#  ^^ source.ocaml keyword.control.ocaml
#    ^^^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^^^^^ source.ocaml
#               ^^^^ source.ocaml keyword.control.ocaml
#                   ^ source.ocaml
#                    ^ source.ocaml meta.paren-group.ocaml
#                     ^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                ^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^^ source.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml
#                                                      ^^^^ source.ocaml keyword.control.ocaml
#                                                          ^ source.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml
#                                                            ^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                                      ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                                       ^^^^ source.ocaml meta.paren-group.ocaml
#                                                                           ^ source.ocaml meta.paren-group.ocaml
>
>(* Encoders. *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^ source.ocaml comment.block.ocaml
#             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>let rec encode_utf_8 e v =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let k e = e.k <- encode_utf_8; `Ok in
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#           ^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^^^^ source.ocaml
#                               ^ source.ocaml punctuation.separator.ocaml
#                                ^ source.ocaml
#                                 ^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                    ^ source.ocaml
#                                     ^^ source.ocaml keyword.other.ocaml
>  match v with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^ source.ocaml
#          ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `Await -> k e
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^^^^^ source.ocaml
>  | `End -> flush k e
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^ source.ocaml
>  | `Uchar u as v ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.pattern-match.ocaml
#                ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.pattern-match.ocaml
#                  ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      let rem = o_rem e in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^^ source.ocaml keyword.other.ocaml
>      if u <= 0x007F then
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^ source.ocaml
#           ^ source.ocaml keyword.operator.symbol.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^ source.ocaml
#              ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml keyword.control.ocaml
>      if rem < 1 then flush (fun e -> encode_utf_8 e v) e else
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^^^ source.ocaml
#             ^ source.ocaml keyword.operator.symbol.ocaml
#              ^ source.ocaml
#               ^ source.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml
#                 ^^^^ source.ocaml keyword.control.ocaml
#                     ^^^^^^^ source.ocaml
#                            ^ source.ocaml meta.function.anonymous.ocaml punctuation.definition.function.anonymous.ocaml
#                             ^^^ source.ocaml meta.function.anonymous.ocaml meta.function.anonymous.definition.ocaml keyword.other.function-definition.ocaml
#                                ^ source.ocaml meta.function.anonymous.ocaml meta.function.anonymous.definition.ocaml
#                                 ^ source.ocaml meta.function.anonymous.ocaml meta.function.anonymous.definition.ocaml variable.parameter.ocaml
#                                  ^ source.ocaml meta.function.anonymous.ocaml meta.function.anonymous.definition.ocaml
#                                   ^^ source.ocaml meta.function.anonymous.ocaml meta.function.anonymous.definition.ocaml punctuation.separator.function-definition.ocaml
#                                     ^^^^^^^^^^^^^^^^^ source.ocaml meta.function.anonymous.ocaml
#                                                      ^ source.ocaml meta.function.anonymous.ocaml punctuation.definition.function.anonymous.ocaml
#                                                       ^^^ source.ocaml
#                                                          ^^^^ source.ocaml keyword.control.ocaml
>      (unsafe_set_byte e.o e.o_pos u; e.o_pos <- e.o_pos + 1; k e)
#^^^^^^ source.ocaml
#      ^ source.ocaml meta.paren-group.ocaml
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                     ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                               ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                ^^^^^^^^^ source.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                          ^ source.ocaml meta.paren-group.ocaml
#                                                           ^ source.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                            ^ source.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                             ^^^^ source.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml meta.paren-group.ocaml
>      else if u <= 0x07FF then
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^ source.ocaml
#           ^^ source.ocaml keyword.control.ocaml
#             ^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^ source.ocaml
#                   ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^^^ source.ocaml keyword.control.ocaml
>      begin
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        let s, j, k =
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>          if rem < 2 then (t_range e 1; e.t, 0, t_flush k) else
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                       ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml
#                                                           ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>          let j = e.o_pos in (e.o_pos <- e.o_pos + 2; e.o, j, k)
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.begin-end-group.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>        in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        unsafe_set_byte s j (0xC0 lor (u lsr 6));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                  ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 1) (0x80 lor (u land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        k e
#^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      else if u <= 0xFFFF then
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
#          ^ source.ocaml
#           ^^ source.ocaml keyword.control.ocaml
#             ^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^ source.ocaml
#                   ^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml
#                          ^^^^ source.ocaml keyword.control.ocaml
>      begin
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        let s, j, k =
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>          if rem < 3 then (t_range e 2; e.t, 0, t_flush k) else
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                       ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml
#                                                           ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>          let j = e.o_pos in (e.o_pos <- e.o_pos + 3; e.o, j, k)
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.begin-end-group.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>        in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        unsafe_set_byte s j (0xE0 lor (u lsr 12));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                  ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 1) (0x80 lor ((u lsr 6) land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 2) (0x80 lor (u land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        k e
#^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      else
#^^^^^^ source.ocaml
#      ^^^^ source.ocaml keyword.control.ocaml
>      begin
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        let s, j, k =
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>          if rem < 4 then (t_range e 3; e.t, 0, t_flush k) else
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                       ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml
#                                                           ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>          let j = e.o_pos in (e.o_pos <- e.o_pos + 4; e.o, j, k)
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.begin-end-group.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>        in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        unsafe_set_byte s j (0xF0 lor (u lsr 18));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                  ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 1) (0x80 lor ((u lsr 12) land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                        ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                             ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 2) (0x80 lor ((u lsr 6) land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                              ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                            ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 3) (0x80 lor (u land 0x3F));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        k e
#^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>
>let rec encode_utf_16be e v =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let k e = e.k <- encode_utf_16be; `Ok in
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#           ^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^^^^^^^ source.ocaml
#                                  ^ source.ocaml punctuation.separator.ocaml
#                                   ^ source.ocaml
#                                    ^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                       ^ source.ocaml
#                                        ^^ source.ocaml keyword.other.ocaml
>  match v with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^ source.ocaml
#          ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `Await -> k e
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^^^^^ source.ocaml
>  | `End -> flush k e
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^ source.ocaml
>  | `Uchar u ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>      let rem = o_rem e in
#^^^^^^ source.ocaml
#      ^^^ source.ocaml keyword.other.ocaml
#         ^^^^^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^^^^^^^^^ source.ocaml
#                        ^^ source.ocaml keyword.other.ocaml
>      if u < 0x10000 then
#^^^^^^ source.ocaml
#      ^^ source.ocaml keyword.control.ocaml
#        ^^^ source.ocaml
#           ^ source.ocaml keyword.operator.symbol.ocaml
#            ^ source.ocaml
#             ^^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml
#                     ^^^^ source.ocaml keyword.control.ocaml
>      begin
#^^^^^^ source.ocaml
#      ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        let s, j, k =
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>          if rem < 2 then (t_range e 1; e.t, 0, t_flush k) else
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                       ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml
#                                                           ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>          let j = e.o_pos in (e.o_pos <- e.o_pos + 2; e.o, j, k)
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.begin-end-group.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>        in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        unsafe_set_byte s j (u lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 1) (u land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                          ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        k e
#^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      end else begin
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
#         ^ source.ocaml
#          ^^^^ source.ocaml keyword.control.ocaml
#              ^ source.ocaml
#               ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>        let s, j, k =
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>          if rem < 4 then (t_range e 3; e.t, 0, t_flush k) else
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                         ^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                       ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.begin-end-group.ocaml
#                                                           ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>          let j = e.o_pos in (e.o_pos <- e.o_pos + 4; e.o, j, k)
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#          ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#             ^^^ source.ocaml meta.begin-end-group.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                 ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                        ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                     ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>        in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        let u' = u - 0x10000 in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                ^^^ source.ocaml meta.begin-end-group.ocaml
#                   ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                    ^ source.ocaml meta.begin-end-group.ocaml
#                     ^^^^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml
#                             ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        let hi = (0xD800 lor (u' lsr 10)) in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                  ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml
#                                          ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        let lo = (0xDC00 lor (u' land 0x3FF)) in
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                  ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml
#                                              ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>        unsafe_set_byte s j (hi lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 1) (hi land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 2) (lo lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        unsafe_set_byte s (j + 3) (lo land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                      ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>        k e
#^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>      end
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>
>let rec encode_utf_16le e v =         (* encode_uft_16be with bytes swapped. *)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^ source.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#        ^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                       ^ source.ocaml meta.function.ocaml
#                        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                             ^^^^^^^^^ source.ocaml
#                                      ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  let k e = e.k <- encode_utf_16le; `Ok in
#^^ source.ocaml
#  ^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.function.ocaml
#      ^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#       ^ source.ocaml meta.function.ocaml
#        ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#         ^ source.ocaml meta.function.ocaml
#          ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#           ^^^^^ source.ocaml
#                ^ source.ocaml keyword.operator.symbol.ocaml
#                 ^ source.ocaml keyword.operator.infix.ocaml
#                  ^^^^^^^^^^^^^^^^ source.ocaml
#                                  ^ source.ocaml punctuation.separator.ocaml
#                                   ^ source.ocaml
#                                    ^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#                                       ^ source.ocaml
#                                        ^^ source.ocaml keyword.other.ocaml
>  match v with
#^^ source.ocaml
#  ^^^^^ source.ocaml keyword.control.ocaml
#       ^^^ source.ocaml
#          ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `Await -> k e
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#             ^^^^^ source.ocaml
>  | `End -> flush k e
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^ source.ocaml
>  | `Uchar u ->
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>    let rem = o_rem e in
#^^^^ source.ocaml
#    ^^^ source.ocaml keyword.other.ocaml
#       ^^^^^ source.ocaml
#            ^ source.ocaml keyword.operator.infix.ocaml
#             ^^^^^^^^^ source.ocaml
#                      ^^ source.ocaml keyword.other.ocaml
>    if u < 0x10000 then
#^^^^ source.ocaml
#    ^^ source.ocaml keyword.control.ocaml
#      ^^^ source.ocaml
#         ^ source.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml
#           ^^^^^^^ source.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml
#                   ^^^^ source.ocaml keyword.control.ocaml
>    begin
#^^^^ source.ocaml
#    ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      let s, j, k =
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#         ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>        if rem < 2 then (t_range e 1; e.t, 0, t_flush k) else
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#          ^^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                     ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.begin-end-group.ocaml
#                                                         ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>        let j = e.o_pos in (e.o_pos <- e.o_pos + 2; e.o, j, k)
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^ source.ocaml meta.begin-end-group.ocaml
#              ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#               ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                      ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                   ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>      in
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>      unsafe_set_byte s j (u land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                  ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      unsafe_set_byte s (j + 1) (u lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      k e
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>    end
#^^^^ source.ocaml meta.begin-end-group.ocaml
#    ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>    else
#^^^^ source.ocaml
#    ^^^^ source.ocaml keyword.control.ocaml
>    begin
#^^^^ source.ocaml
#    ^^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>      let s, j, k =
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#         ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
>        if rem < 4 then (t_range e 3; e.t, 0, t_flush k) else
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#          ^^^^^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.symbol.ocaml
#                ^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
#                       ^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                     ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                            ^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                        ^ source.ocaml meta.begin-end-group.ocaml
#                                                         ^^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.ocaml
>        let j = e.o_pos in (e.o_pos <- e.o_pos + 4; e.o, j, k)
#^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#        ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#           ^^^ source.ocaml meta.begin-end-group.ocaml
#              ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#               ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                            ^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.symbol.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                      ^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                                   ^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
>      in
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>      let u' = u - 0x10000 in
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.begin-end-group.ocaml
#             ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#              ^^^ source.ocaml meta.begin-end-group.ocaml
#                 ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#                  ^ source.ocaml meta.begin-end-group.ocaml
#                   ^^^^^^^ source.ocaml meta.begin-end-group.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml
#                           ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>      let hi = (0xD800 lor (u' lsr 10)) in
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.begin-end-group.ocaml
#             ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                       ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                   ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                     ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml
#                                        ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>      let lo = (0xDC00 lor (u' land 0x3FF)) in
#^^^^^^ source.ocaml meta.begin-end-group.ocaml
#      ^^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
#         ^^^^ source.ocaml meta.begin-end-group.ocaml
#             ^ source.ocaml meta.begin-end-group.ocaml keyword.operator.infix.ocaml
#              ^ source.ocaml meta.begin-end-group.ocaml
#               ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                ^^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                      ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                       ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                   ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                           ^ source.ocaml meta.begin-end-group.ocaml
#                                            ^^ source.ocaml meta.begin-end-group.ocaml keyword.other.ocaml
>      unsafe_set_byte s j (hi land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                          ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                              ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                  ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      unsafe_set_byte s (j + 1) (hi lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      unsafe_set_byte s (j + 2) (lo land 0xFF);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                         ^^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                              ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      unsafe_set_byte s (j + 3) (lo lsr 8);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
#                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                             ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                              ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.begin-end-group.ocaml
#                                ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                 ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                    ^^^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                       ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                         ^ source.ocaml meta.begin-end-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.begin-end-group.ocaml punctuation.separator.ocaml
>      k e
#^^^^^^^^^^ source.ocaml meta.begin-end-group.ocaml
>    end
#^^^^ source.ocaml meta.begin-end-group.ocaml
#    ^^^ source.ocaml meta.begin-end-group.ocaml keyword.control.begin-end.ocaml
>
>let encode_fun = function
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml
#                 ^^^^^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>| `UTF_8 -> encode_utf_8
#^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-pattern.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#        ^ source.ocaml meta.pattern-match.ocaml
#         ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#           ^^^^^^^^^^^^^^ source.ocaml
>| `UTF_16 -> encode_utf_16be
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#         ^ source.ocaml meta.pattern-match.ocaml
#          ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#            ^^^^^^^^^^^^^^^^^ source.ocaml
>| `UTF_16BE -> encode_utf_16be
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
>| `UTF_16LE -> encode_utf_16le
#^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^^^^^^^^^^^^^^^^^ source.ocaml
>
>let encoder encoding dst =
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#           ^ source.ocaml meta.function.ocaml
#            ^^^^^^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^^^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
>  let o, o_pos, o_max = match dst with
#^^ source.ocaml
#  ^^^ source.ocaml keyword.other.ocaml
#     ^^^^^^^^^^^^^^^^^ source.ocaml
#                      ^ source.ocaml keyword.operator.infix.ocaml
#                       ^ source.ocaml
#                        ^^^^^ source.ocaml keyword.control.ocaml
#                             ^^^^^ source.ocaml
#                                  ^^^^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `Manual -> "", 1, 0                              (* implies o_rem e = 0. *)
#^ source.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#              ^ source.ocaml
#               ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#                ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
#                 ^^ source.ocaml
#                   ^ source.ocaml constant.numeric.integer.ocaml
#                    ^^ source.ocaml
#                      ^ source.ocaml constant.numeric.integer.ocaml
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                       ^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>  | `Buffer _
#^^ source.ocaml
#  ^ source.ocaml keyword.operator.infix.ocaml
#   ^ source.ocaml
#    ^^^^^^^ source.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^^^ source.ocaml
>  | `Channel _ -> String.create io_buffer_size, 0, io_buffer_size - 1
#^^ source.ocaml
#  ^ source.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^ source.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#            ^ source.ocaml meta.pattern-match.ocaml
#             ^ source.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#              ^ source.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                 ^ source.ocaml
#                  ^^^^^^^ source.ocaml meta.module-reference.ocaml
#                         ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml
#                                                ^ source.ocaml constant.numeric.integer.ocaml
#                                                 ^^^^^^^^^^^^^^^^^ source.ocaml
#                                                                  ^ source.ocaml keyword.operator.infix.ocaml
#                                                                   ^ source.ocaml
#                                                                    ^ source.ocaml constant.numeric.integer.ocaml
>  in
#^^ source.ocaml
#  ^^ source.ocaml keyword.other.ocaml
>  { dst = (dst :> dst); encoding = (encoding :> encoding); o; o_pos; o_max;
#^^ source.ocaml
#  ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#   ^^^^^ source.ocaml meta.record.ocaml
#        ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#         ^ source.ocaml meta.record.ocaml
#          ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#           ^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml
#               ^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                 ^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                     ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                      ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                       ^^^^^^^^^^ source.ocaml meta.record.ocaml
#                                 ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                  ^ source.ocaml meta.record.ocaml
#                                   ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                    ^^^^^^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml
#                                             ^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                                               ^^^^^^^^^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                                                        ^ source.ocaml meta.record.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                                                         ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                          ^^ source.ocaml meta.record.ocaml
#                                                            ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                             ^^^^^^ source.ocaml meta.record.ocaml
#                                                                   ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                                                    ^^^^^^ source.ocaml meta.record.ocaml
#                                                                          ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
>    t = String.create 4; t_pos = 1; t_max = 0; k = encode_fun encoding}
#^^^^^^ source.ocaml meta.record.ocaml
#      ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#       ^ source.ocaml meta.record.ocaml
#        ^^^^^^^ source.ocaml meta.record.ocaml meta.module-reference.ocaml
#               ^^^^^^^ source.ocaml meta.record.ocaml
#                      ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                        ^^^^^^^ source.ocaml meta.record.ocaml
#                               ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                ^ source.ocaml meta.record.ocaml
#                                 ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                  ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                   ^^^^^^^ source.ocaml meta.record.ocaml
#                                          ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                           ^ source.ocaml meta.record.ocaml
#                                            ^ source.ocaml meta.record.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.record.ocaml punctuation.separator.ocaml
#                                              ^^^ source.ocaml meta.record.ocaml
#                                                 ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                                                  ^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.record.ocaml
#                                                                      ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
>
>let encode e v = e.k e (v :> encode)
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#          ^ source.ocaml meta.function.ocaml
#           ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.function.ocaml
#             ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.function.ocaml
#               ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^^^^^^^ source.ocaml
#                       ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
#                        ^^ source.ocaml meta.type-constraint.ocaml
#                          ^^ source.ocaml meta.type-constraint.ocaml punctuation.separator.type-constraint.ocaml
#                            ^^^^^^^ source.ocaml meta.type-constraint.ocaml storage.type.ocaml
#                                   ^ source.ocaml meta.type-constraint.ocaml punctuation.section.type-constraint.ocaml
>let encoder_encoding e = e.encoding
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#                    ^ source.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^ source.ocaml
>let encoder_dst e = e.dst
#^^^ source.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#   ^ source.ocaml meta.function.ocaml
#    ^^^^^^^^^^^ source.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.function.ocaml
#                ^ source.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.function.ocaml keyword.operator.ocaml
#                   ^^^^^^^ source.ocaml
>
>(* Manual sources and destinations. *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                    ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>module Manual = struct
#^^^^^^ source.ocaml meta.module.ocaml keyword.other.module-definition.ocaml
#      ^ source.ocaml meta.module.ocaml
#       ^^^^^^ source.ocaml meta.module.ocaml entity.name.type.module.ocaml
#             ^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>  let src = src
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml meta.module.structure.ocaml
#          ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#           ^^^^^ source.ocaml meta.module.structure.ocaml
>  let dst = dst
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#     ^^^^^ source.ocaml meta.module.structure.ocaml
#          ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#           ^^^^^ source.ocaml meta.module.structure.ocaml
>  let dst_rem = o_rem
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#     ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^^^^^^^ source.ocaml meta.module.structure.ocaml
>end
#^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>
>(* Strings folders and Buffer encoders *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                       ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>
>module String = struct
#^^^^^^ source.ocaml meta.module.ocaml keyword.other.module-definition.ocaml
#      ^ source.ocaml meta.module.ocaml
#       ^^^^^^ source.ocaml meta.module.ocaml entity.name.type.module.ocaml
#             ^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>  let encoding_guess s = match r_encoding s 0 (max (String.length s) 3) with
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                              ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                                                           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                       ^ source.ocaml meta.module.structure.ocaml
#                                                                        ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>  | `UTF_8 d -> `UTF_8, (d = `BOM)
#^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
# ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#    ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#          ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#             ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.polymorphic.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>  | `UTF_16BE d -> `UTF_16BE, (d = `BOM)
#^^ source.ocaml meta.module.structure.ocaml
#  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.polymorphic.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>  | `UTF_16LE d -> `UTF_16LE, (d = `BOM)
#^^ source.ocaml meta.module.structure.ocaml
#  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#    ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^^^^^^ source.ocaml meta.module.structure.ocaml entity.name.type.variant.polymorphic.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml entity.name.type.variant.polymorphic.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>  type 'a folder =
#^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml
#  ^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml keyword.other.type-definition.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#       ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.type-definition.ocaml
>    'a -> int -> [ `Uchar of uchar | `Malformed of string ] -> 'a
#^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#       ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.function-return.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#              ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.function-return.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                   ^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                             ^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.separator.variant-definition.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                     ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml entity.name.type.variant.polymorphic.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml keyword.other.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                   ^^^^^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml storage.type.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml meta.polymorphic-variant.definition.ocaml punctuation.definition.polymorphic-variant.ocaml
#                                                           ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                            ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml punctuation.separator.function-return.ocaml
#                                                              ^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml
#                                                               ^^ source.ocaml meta.module.structure.ocaml meta.type-definition-group.ocaml meta.type-definition.ocaml storage.type.ocaml
>
>  let fold_utf_8 f acc s =
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>    let rec loop acc f s i l =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      if i = l then acc else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                   ^^^^^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      let need = unsafe_array_get utf_8_len (unsafe_byte s i) in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                             ^ source.ocaml meta.module.structure.ocaml
#                                                              ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      if need = 0 then loop (f acc i (malformed s i 1)) f s (i + 1) l else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml meta.module.structure.ocaml
#                ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml
#                  ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                      ^^^^^^ source.ocaml meta.module.structure.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                       ^^^^^ source.ocaml meta.module.structure.ocaml
#                                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                             ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                   ^^^ source.ocaml meta.module.structure.ocaml
#                                                                      ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      let rem = l - i in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^ source.ocaml meta.module.structure.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      if rem < need then f acc i (malformed s i rem) else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#              ^^^^^^ source.ocaml meta.module.structure.ocaml
#                    ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                        ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                  ^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml
#                                                     ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      loop (f acc i (r_utf_8 s i need)) f s (i + need) l
#^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#            ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                     ^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                       ^^^^^ source.ocaml meta.module.structure.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                      ^^^ source.ocaml meta.module.structure.ocaml
>    in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    loop acc f s 0 (String.length s)
#^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>  let fold_utf_16be f acc s =
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>    let rec loop acc f s i l =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      if i = l then acc else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                   ^^^^^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      let rem = l - i in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^ source.ocaml meta.module.structure.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      if rem < 2 then f acc i (malformed s i 1) else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                     ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml
#                                                ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      match r_utf_16 s i (i + 1) with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml
#                                 ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | `Uchar _ | `Malformed _ as v -> loop (f acc i v) f s (i + 2) l
#^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                       ^^^^^^ source.ocaml meta.module.structure.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                        ^^^^^ source.ocaml meta.module.structure.ocaml
#                                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                              ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                    ^^^ source.ocaml meta.module.structure.ocaml
>      | `Hi hi ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          if rem < 4 then f acc i (malformed s i rem)  else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                         ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                     ^^ source.ocaml meta.module.structure.ocaml
#                                                       ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>          loop (f acc i (r_utf_16_lo hi s (i + 2) (i + 3))) f s (i + 4) l
#^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                           ^^^^^ source.ocaml meta.module.structure.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                 ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                       ^^^ source.ocaml meta.module.structure.ocaml
>    in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    loop acc f s 0 (String.length s)
#^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>  let fold_utf_16le f acc s =             (* [fold_utf_16be], bytes swapped. *)
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                      ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                             ^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    let rec loop acc f s i l =
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.funtion-definition.ocaml
#            ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>      if i = l then acc else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                   ^^^^^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      let rem = l - i in
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#         ^^^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#               ^^^ source.ocaml meta.module.structure.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                   ^^^ source.ocaml meta.module.structure.ocaml
#                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>      if rem < 2 then f acc i (malformed s i 1) else
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^^^^^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#              ^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                     ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                               ^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml
#                                                ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>      match r_utf_16 s (i + 1) i with
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.module.structure.ocaml
#                                 ^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
>      | `Uchar _ | `Malformed _ as v -> loop (f acc i v) f s (i + 2) l
#^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                   ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml constant.language.universal-match.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#                                     ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
#                                       ^^^^^^ source.ocaml meta.module.structure.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                              ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                        ^^^^^ source.ocaml meta.module.structure.ocaml
#                                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                              ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                    ^^^ source.ocaml meta.module.structure.ocaml
>      | `Hi hi ->
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml keyword.control.match-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#        ^^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml entity.name.type.variant.polymorphic.ocaml
#           ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#            ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml
#               ^^ source.ocaml meta.module.structure.ocaml meta.pattern-match.ocaml punctuation.separator.match-definition.ocaml
>          if rem < 4 then f acc i (malformed s i rem)  else
#^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#          ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#            ^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml
#                     ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                         ^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                     ^^ source.ocaml meta.module.structure.ocaml
#                                                       ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>          loop (f acc i (r_utf_16_lo hi s (i + 3) (i + 2))) f s (i + 4) l
#^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                           ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                           ^^^^^ source.ocaml meta.module.structure.ocaml
#                                                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                 ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.infix.ocaml
#                                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                                       ^^^ source.ocaml meta.module.structure.ocaml
>    in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    loop acc f s 0 (String.length s)
#^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.module-reference.ocaml
#                           ^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>end
#^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>
>module Buffer = struct
#^^^^^^ source.ocaml meta.module.ocaml keyword.other.module-definition.ocaml
#      ^ source.ocaml meta.module.ocaml
#       ^^^^^^ source.ocaml meta.module.ocaml entity.name.type.module.ocaml
#             ^ source.ocaml
#              ^ source.ocaml keyword.operator.infix.ocaml
#               ^ source.ocaml
#                ^^^^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>  let add_utf_8 b u =
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>    let w byte = Buffer.add_char b (unsafe_chr byte) in          (* inlined. *)
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                        ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml
#                                                     ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                                                       ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                                 ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    if u <= 0x007F then
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml
#         ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#           ^ source.ocaml meta.module.structure.ocaml
#            ^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    (w u)
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>    else if u <= 0x07FF then
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^ source.ocaml meta.module.structure.ocaml
#         ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    (w (0xC0 lor (u lsr 6));
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#     ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor (u land 0x3F)))
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>    else if u <= 0xFFFF then
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#        ^ source.ocaml meta.module.structure.ocaml
#         ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#           ^^^ source.ocaml meta.module.structure.ocaml
#              ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    (w (0xE0 lor (u lsr 12));
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#     ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor ((u lsr 6) land 0x3F));
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor (u land 0x3F)))
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>    else
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    (w (0xF0 lor (u lsr 18));
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#     ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                        ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor ((u lsr 12) land 0x3F));
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor ((u lsr 6) land 0x3F));
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                   ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                          ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
>     w (0x80 lor (u land 0x3F)))
#^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                  ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                    ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                         ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>  let add_utf_16be b u =
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
>    let w byte = Buffer.add_char b (unsafe_chr byte) in          (* inlined. *)
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                        ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml
#                                                     ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                                                       ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                                 ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    if u < 0x10000 then (w (u lsr 8); w (u land 0xFF)) else
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml
#         ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml meta.module.structure.ocaml
#           ^^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                         ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                           ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml
#                                                       ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    let u' = u - 0x10000 in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    let hi = (0xD800 lor (u' lsr 10)) in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    let lo = (0xDC00 lor (u' land 0x3FF)) in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    w (hi lsr 8); w (hi land 0xFF);
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
>    w (lo lsr 8); w (lo land 0xFF)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                 ^^^ source.ocaml meta.module.structure.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                        ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>
>  let add_utf_16le b u =                            (* swapped add_utf_16be. *)
#^^ source.ocaml meta.module.structure.ocaml
#  ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#      ^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                     ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#                      ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                    ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    let w byte = Buffer.add_char b (unsafe_chr byte) in          (* inlined. *)
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.other.function-definition.ocaml
#       ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#        ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml entity.name.function.ocaml
#         ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.function.ocaml variable.parameter.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml
#               ^ source.ocaml meta.module.structure.ocaml meta.function.ocaml keyword.operator.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^ source.ocaml meta.module.structure.ocaml meta.module-reference.ocaml
#                        ^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                    ^^^^^^^^^^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml
#                                                     ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#                                                       ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml
#                                                                 ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#                                                                   ^^^^^^^^^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml meta.module.structure.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>    if u < 0x10000 then (w (u land 0xFF); w (u lsr 8)) else
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#      ^^^ source.ocaml meta.module.structure.ocaml
#         ^ source.ocaml meta.module.structure.ocaml keyword.operator.symbol.ocaml
#          ^ source.ocaml meta.module.structure.ocaml
#           ^^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                  ^ source.ocaml meta.module.structure.ocaml
#                   ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
#                       ^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                           ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                            ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                              ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                   ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml punctuation.separator.ocaml
#                                         ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                            ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                             ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                               ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                                  ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                                     ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                                      ^ source.ocaml meta.module.structure.ocaml
#                                                       ^^^^ source.ocaml meta.module.structure.ocaml keyword.control.ocaml
>    let u' = u - 0x10000 in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^^^ source.ocaml meta.module.structure.ocaml
#               ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#                ^ source.ocaml meta.module.structure.ocaml
#                 ^^^^^^^ source.ocaml meta.module.structure.ocaml constant.numeric.integer.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml
#                         ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    let hi = (0xD800 lor (u' lsr 10)) in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                 ^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                     ^ source.ocaml meta.module.structure.ocaml
#                                      ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    let lo = (0xDC00 lor (u' land 0x3FF)) in
#^^^^ source.ocaml meta.module.structure.ocaml
#    ^^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
#       ^^^^ source.ocaml meta.module.structure.ocaml
#           ^ source.ocaml meta.module.structure.ocaml keyword.operator.infix.ocaml
#            ^ source.ocaml meta.module.structure.ocaml
#             ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#              ^^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                          ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                             ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                  ^^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                       ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml meta.paren-group.ocaml
#                                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                         ^ source.ocaml meta.module.structure.ocaml
#                                          ^^ source.ocaml meta.module.structure.ocaml keyword.other.ocaml
>    w (hi land 0xFF); w (hi lsr 8);
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                  ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
>    w (lo land 0xFF); w (lo lsr 8)
#^^^^^^ source.ocaml meta.module.structure.ocaml
#      ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#       ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#          ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#              ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#               ^^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                   ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                    ^ source.ocaml meta.module.structure.ocaml punctuation.separator.ocaml
#                     ^^^ source.ocaml meta.module.structure.ocaml
#                        ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                         ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                            ^^^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml keyword.operator.ocaml
#                               ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
#                                ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml constant.numeric.integer.ocaml
#                                 ^ source.ocaml meta.module.structure.ocaml meta.paren-group.ocaml
>end
#^^^ source.ocaml meta.module.structure.ocaml keyword.other.module.structure.ocaml
>
>(*---------------------------------------------------------------------------
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   Copyright 2012 Daniel C. BÃ¼nzli
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   All rights reserved.
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   Redistribution and use in source and binary forms, with or without
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   modification, are permitted provided that the following conditions
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   are met:
#^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   1. Redistributions of source code must retain the above copyright
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      notice, this list of conditions and the following disclaimer.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   2. Redistributions in binary form must reproduce the above
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      copyright notice, this list of conditions and the following
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      disclaimer in the documentation and/or other materials provided
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      with the distribution.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   3. Neither the name of Daniel C. BÃ¼nzli nor the names of
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      contributors may be used to endorse or promote products derived
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>      from this software without specific prior written permission.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>
>   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
>  ---------------------------------------------------------------------------*)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                                                                             ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>