>(** This is a string *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let _ = "hello"
#^^^ source.ocaml keyword.other.ocaml
#   ^^^ source.ocaml
#      ^ source.ocaml keyword.operator.infix.ocaml
#       ^ source.ocaml
#        ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
#         ^^^^^ source.ocaml string.quoted.double.ocaml
#              ^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>
>(** This is a string *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                     ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let () =
#^^^ source.ocaml keyword.other.ocaml
#   ^ source.ocaml
#    ^ source.ocaml constant.language.pseudo-variable.ocaml
#     ^ source.ocaml constant.language.pseudo-variable.ocaml meta.empty-typing-pair.parens.ocaml
#      ^ source.ocaml
#       ^ source.ocaml keyword.operator.infix.ocaml
>  Printf.printf
#^^ source.ocaml
#  ^^^^^^^ source.ocaml meta.module-reference.ocaml
#         ^^^^^^^ source.ocaml
>    {|
#^^^^ source.ocaml
#    ^^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.begin.ocaml
>(rule
#^^^^^^ source.ocaml string.quoted.double.ocaml
> (targets %s.output)
#^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
> (deps .ocamlformat %s)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
> (action
#^^^^^^^^^ source.ocaml string.quoted.double.ocaml
>   (with-outputs-to %%{targets}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
>     (system "%s%%{bin:ocamlformat}%s %%{dep:%s}"))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
>
>(alias
#^^^^^^^ source.ocaml string.quoted.double.ocaml
> (name runtest)
#^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
> (action (diff %s %s.output)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml string.quoted.double.ocaml
>|}
#^^ source.ocaml string.quoted.double.ocaml punctuation.definition.string.end.ocaml
>
>(** This is also a string *)
#^^ source.ocaml comment.block.ocaml punctuation.definition.comment.begin.ocaml
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.ocaml comment.block.ocaml
#                          ^^ source.ocaml comment.block.ocaml punctuation.definition.comment.end.ocaml
>let _ = {delimiter|contents|delimiter}
#^^^ source.ocaml keyword.other.ocaml
#   ^^^ source.ocaml
#      ^ source.ocaml keyword.operator.infix.ocaml
#       ^ source.ocaml
#        ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
#         ^^^^^^^^^ source.ocaml meta.record.ocaml
#                  ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                   ^^^^^^^^ source.ocaml meta.record.ocaml
#                           ^ source.ocaml meta.record.ocaml keyword.operator.infix.ocaml
#                            ^^^^^^^^^ source.ocaml meta.record.ocaml
#                                     ^ source.ocaml meta.record.ocaml punctuation.definition.record.ocaml
>